[
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Overview",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\n\n\n\n\nLecture 1: Introduction to CPSC 330\n\n\nWhat is machine learning, types of machine learning, learning to navigate through the course materials, getting familiar with the course policies\n\n\n\n\nLecture 2: Terminology, Baselines, Decision Trees\n\n\nSupervised machine learning terminology: Features, target, examples, training, parameters and hyperparameters, Decision boundary, classification vs. regression, inference vs. prediction, accuracy vs. error, baselines, intuition of decision trees\n\n\n\n\nLecture 3: ML fundamentals\n\n\ngeneralization, data splitting, overfitting, underfitting, the fundamental tradeoff, the golden rule\n\n\n\n\nLecture 4: \\(k\\)-nearest neighbours and SVM RBFs\n\n\nintroduction to KNNs, hyperparameter n_neighbours or \\(k\\), C and gamma hyperparameters of SVM RBF, decision boundaries with different values of hyperparameters.\n\n\n\n\nLecture 5: Preprocessing and sklearn pipelines\n\n\nPre-processing, Transformations, and pipelines.\n\n\n\n\nLecture 6: Column transformer and text features\n\n\nPreprocessing and sklearn pipelines\n\n\n\n\nLecture 7: Linear models\n\n\nLinear regression, logistic regression, prediction probabilities, sigmoid, interpretation of coefficients\n\n\n\n\nCPSC 330 Lecture 8: Hyperparameter Optimization\n\n\nLinear regression, logistic regression, prediction probabilities, sigmoid, interpretation of coefficients\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides-08.html#announcements",
    "href": "slides-08.html#announcements",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Announcements",
    "text": "Announcements\n\nImportant information about midterm 1\n\nhttps://piazza.com/class/m01ukubppof625/post/249\n\nReminder of my office hours\n\nWednesdays from 12:30 to 1:30 PM in my office ICCS 253\n\nHW3 is due today 11:59 pm.\nHW4 has been released"
  },
  {
    "objectID": "slides-08.html#recap-logistic-regression",
    "href": "slides-08.html#recap-logistic-regression",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Recap: Logistic regression",
    "text": "Recap: Logistic regression\n\nA linear model used for binary classification tasks.\n\nThere is a variant of logistic regression called multinomial logistic regression for multiclass classification.\n\nParameters:\n\nCoefficients (Weights): The model learns a coefficient or a weight associated with each feature that represents its importance.\nBias (Intercept): A constant term added to the linear combination of features and their coefficients."
  },
  {
    "objectID": "slides-08.html#recap-logistic-regression-1",
    "href": "slides-08.html#recap-logistic-regression-1",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Recap: Logistic regression",
    "text": "Recap: Logistic regression\n\nThe model computes a weighted sum of the input features’ values, adjusted by their respective coefficients and the bias term.\nThis weighted sum is passed through a sigmoid function to transform it into a probability score, indicating the likelihood of the input belonging to the “positive” class.\n\n\\[\\begin{equation}\nP_{hat} = \\sigma\\left(\\sum_{i=1}^d w_i x_i + b\\right)\n\\end{equation}\\]\n\n\\(P_{hat}\\) is the predicted probability of the example belonging to the positive class.\n\\(w_i\\) is the learned weight associated with feature \\(i\\)\n\\(x_i\\) is the value of the input feature \\(i\\)\n\\(b\\) is the bias term"
  },
  {
    "objectID": "slides-08.html#recap-logistic-regression-2",
    "href": "slides-08.html#recap-logistic-regression-2",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Recap: Logistic regression",
    "text": "Recap: Logistic regression\n\nFor a dataset with \\(d\\) features, the decision boundary that separates the classes is a \\(d-1\\) dimensional hyperplane.\n\nComplexity hyperparameter: C in sklearn.\n\nHigher C \\(\\rightarrow\\) more complex model meaning larger coefficients\nLower C \\(\\rightarrow\\) less complex model meaning smaller coefficients"
  },
  {
    "objectID": "slides-08.html#recap-countvectorizer-input",
    "href": "slides-08.html#recap-countvectorizer-input",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Recap: CountVectorizer input",
    "text": "Recap: CountVectorizer input\n\nPrimarily designed to accept either a pandas.Series of text data or a 1D numpy array. It can also process a list of string data directly.\nUnlike many transformers that handle multiple features (DataFrame or 2D numpy array), CountVectorizer a single text column at a time.\nIf your dataset contains multiple text columns, you will need to instantiate separate CountVectorizer objects for each text feature.\nThis approach ensures that the unique vocabulary and tokenization processes are correctly applied to each specific text column without interference."
  },
  {
    "objectID": "slides-08.html#hyperparameter-optimization-motivation",
    "href": "slides-08.html#hyperparameter-optimization-motivation",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Hyperparameter optimization motivation",
    "text": "Hyperparameter optimization motivation"
  },
  {
    "objectID": "slides-08.html#data",
    "href": "slides-08.html#data",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Data",
    "text": "Data\n\nsms_df = pd.read_csv(DATA_DIR + \"spam.csv\", encoding=\"latin-1\")\nsms_df = sms_df.drop(columns = [\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"])\nsms_df = sms_df.rename(columns={\"v1\": \"target\", \"v2\": \"sms\"})\ntrain_df, test_df = train_test_split(sms_df, test_size=0.10, random_state=42)\nX_train, y_train = train_df[\"sms\"], train_df[\"target\"]\nX_test, y_test = test_df[\"sms\"], test_df[\"target\"]\ntrain_df.head(4)\n\n\n\n\n\n\n\n\ntarget\nsms\n\n\n\n\n3130\nspam\nLookAtMe!: Thanks for your purchase of a video...\n\n\n106\nham\nAight, I'll hit you up when I get some cash\n\n\n4697\nham\nDon no da:)whats you plan?\n\n\n856\nham\nGoing to take your babe out ?"
  },
  {
    "objectID": "slides-08.html#model-building",
    "href": "slides-08.html#model-building",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Model building",
    "text": "Model building\n\nLet’s define a pipeline\n\n\npipe_svm = make_pipeline(CountVectorizer(), SVC())\n\n\nSuppose we want to try out different hyperparameter values.\n\n\nparameters = {\n    \"max_features\": [100, 200, 400],\n    \"gamma\": [0.01, 0.1, 1.0],\n    \"C\": [0.01, 0.1, 1.0],\n}"
  },
  {
    "objectID": "slides-08.html#hyperparameter-optimization-with-loops",
    "href": "slides-08.html#hyperparameter-optimization-with-loops",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Hyperparameter optimization with loops",
    "text": "Hyperparameter optimization with loops\n\nDefine a parameter space.\nIterate through possible combinations.\nEvaluate model performance.\nWhat are some limitations of this approach?"
  },
  {
    "objectID": "slides-08.html#sklearn-methods",
    "href": "slides-08.html#sklearn-methods",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "sklearn methods",
    "text": "sklearn methods\n\nsklearn provides two main methods for hyperparameter optimization\n\nGrid Search\nRandom Search"
  },
  {
    "objectID": "slides-08.html#grid-search",
    "href": "slides-08.html#grid-search",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Grid Search",
    "text": "Grid Search\n\nCovers all possible combinations from the provided grid.\nCan be parallelized easily.\nIntegrates cross-validation."
  },
  {
    "objectID": "slides-08.html#grid-search-example",
    "href": "slides-08.html#grid-search-example",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Grid search example",
    "text": "Grid search example\n\nfrom sklearn.model_selection import GridSearchCV\n\npipe_svm = make_pipeline(CountVectorizer(), SVC())\n\nparam_grid = {\n    \"countvectorizer__max_features\": [100, 200, 400],\n    \"svc__gamma\": [0.01, 0.1, 1.0],\n    \"svc__C\": [0.01, 0.1, 1.0],\n}\ngrid_search = GridSearchCV(pipe_svm, \n                  param_grid = param_grid, \n                  n_jobs=-1, \n                  return_train_score=True\n                 )\ngrid_search.fit(X_train, y_train)\ngrid_search.best_score_\n\n0.9782606272997375"
  },
  {
    "objectID": "slides-08.html#random-search",
    "href": "slides-08.html#random-search",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Random Search",
    "text": "Random Search\n\nMore efficient than grid search when dealing with large hyperparameter spaces.\nSamples a given number of parameter settings from distributions."
  },
  {
    "objectID": "slides-08.html#random-search-example",
    "href": "slides-08.html#random-search-example",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Random search example",
    "text": "Random search example\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\npipe_svc = make_pipeline(CountVectorizer(), SVC())\n\nparam_dist = {\n    \"countvectorizer__max_features\": randint(100, 2000), \n    \"svc__C\": uniform(0.1, 1e4),  # loguniform(1e-3, 1e3),\n    \"svc__gamma\": loguniform(1e-5, 1e3),\n}\nrandom_search = RandomizedSearchCV(pipe_svm,                                    \n                  param_distributions = param_dist, \n                  n_iter=10, \n                  n_jobs=-1, \n                  return_train_score=True)\n\n# Carry out the search\nrandom_search.fit(X_train, y_train)\nrandom_search.best_score_\n\n0.9812518532227668"
  },
  {
    "objectID": "slides-08.html#optimization-bias",
    "href": "slides-08.html#optimization-bias",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Optimization bias",
    "text": "Optimization bias\n\nWhy do we need separate validation and test datasets?"
  },
  {
    "objectID": "slides-08.html#mitigating-optimization-bias.",
    "href": "slides-08.html#mitigating-optimization-bias.",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Mitigating optimization bias.",
    "text": "Mitigating optimization bias.\n\nCross-validation\nEnsembles\nRegularization and choosing a simpler model"
  },
  {
    "objectID": "slides-08.html#iclicker-exercise-8.1",
    "href": "slides-08.html#iclicker-exercise-8.1",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "(iClicker) Exercise 8.1",
    "text": "(iClicker) Exercise 8.1\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nIf you get best results at the edges of your parameter grid, it might be a good idea to adjust the range of values in your parameter grid.\n\n\nGrid search is guaranteed to find the best hyperparameter values.\n\n\nIt is possible to get different hyperparameters in different runs of RandomizedSearchCV."
  },
  {
    "objectID": "slides-08.html#questions-for-you",
    "href": "slides-08.html#questions-for-you",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Questions for you",
    "text": "Questions for you\n\nYou have a dataset and you give me 1/10th of it. The dataset given to me is rather small and so I split it into 96% train and 4% validation split. I carry out hyperparameter optimization using a single 4% validation split and report validation accuracy of 0.97. Would it classify the rest of the data with similar accuracy?\n\nProbably\nProbably not"
  },
  {
    "objectID": "slides-08.html#questions-for-class-discussion",
    "href": "slides-08.html#questions-for-class-discussion",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Questions for class discussion",
    "text": "Questions for class discussion\n\nSuppose you have 10 hyperparameters, each with 4 possible values. If you run GridSearchCV with this parameter grid, how many experiments will be carried out?\nSuppose you have 10 hyperparameters and each takes 4 values. If you run RandomizedSearchCV with this parameter grid with n_iter=20, how many cross-validation experiments will be carried out?"
  },
  {
    "objectID": "slides-08.html#group-work-invention-activity",
    "href": "slides-08.html#group-work-invention-activity",
    "title": "CPSC 330 Lecture 8: Hyperparameter Optimization",
    "section": "Group Work: Invention Activity",
    "text": "Group Work: Invention Activity\nSo far we have looked only at score as a metric for evaluating our metrics.\nWhat else could be used as a possible metric? Think of what else might be important for machine learning practioners and stakeholders?\nIn your group, brainstorm 4 alternative options:"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#announcements",
    "href": "slides-05-preprocessing-pipelines.html#announcements",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Announcements",
    "text": "Announcements\n\nHW1 grades have been posted.\nHomework 1 solutions have been posted on Canvas under Files tab. Please do not share them with anyone or do not post them anywhere."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#curse-of-dimensionality",
    "href": "slides-05-preprocessing-pipelines.html#curse-of-dimensionality",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Curse of dimensionality",
    "text": "Curse of dimensionality\n\nAs dimensionality increases, the volume of the space increases exponentially, making the data sparse.\nDistance metrics lose meaning\n\nAccidental similarity swamps out meaningful similarity\nAll points become almost equidistant.\n\nOverfitting becomes likely: Harder to generalize with high-dimensional data.\nHow to deal with this?\n\nDimensionality reduction (PCA) (not covered in this course)\nFeature selection techniques."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#svms-with-rbf-kernel",
    "href": "slides-05-preprocessing-pipelines.html#svms-with-rbf-kernel",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "SVMs with RBF kernel",
    "text": "SVMs with RBF kernel\n\nRBF Kernel: Radial Basis Function, a way to transform data into higher dimensions implicitly.\nStrengths\n\nEffective in high-dimensional and sparse data\nGood performance on non-linear problems.\n\nHyperparameters:\n\nC$: Regularization parameter (trade-off between correct classification of training examples and maximization of the decision margin).\n\\(\\gamma\\): Defines how far the influence of a single training example reaches."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#intuition-of-c-and-gamma-in-svm-rbf",
    "href": "slides-05-preprocessing-pipelines.html#intuition-of-c-and-gamma-in-svm-rbf",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Intuition of C and gamma in SVM RBF",
    "text": "Intuition of C and gamma in SVM RBF\n\nC (Regularization): Controls the trade-off between perfect training accuracy and having a simpler decision boundary.\n\nHigh C: Strict, complex boundary (overfitting risk).\nLow C: More errors allowed, smoother boundary (generalizes better).\n\nGamma (Kernel Width): Controls the influence of individual data points.\n\nHigh Gamma: Points have local impact, complex boundary.\nLow Gamma: Points affect broader areas, smoother boundary.\n\nKey trade-off: Proper balance between C and gamma is crucial for avoiding overfitting or underfitting."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#recap",
    "href": "slides-05-preprocessing-pipelines.html#recap",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Recap",
    "text": "Recap\n\nDecision trees: Split data into subsets based on feature values to create decision rules\n\\(k\\)-NNs: Classify based on the majority vote from k nearest neighbors\nSVM RBFs: Create a boundary using an RBF kernel to separate classes"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#recap-1",
    "href": "slides-05-preprocessing-pipelines.html#recap-1",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Recap",
    "text": "Recap\n\n\n\n\n\n\n\n\n\nAspect\nDecision Trees\nK-Nearest Neighbors (KNN)\nSupport Vector Machines (SVM) with RBF Kernel\n\n\n\n\nMain hyperparameters\nMax depth, min samples split\nNumber of neighbors (\\(k\\))\nC (regularization), Gamma (RBF kernel width)\n\n\nInterpretability\n\n\n\n\n\nHandling of Non-linearity\n\n\n\n\n\nScalability\n\n\n\n\n\n\n\nInterpretability (output easy to understand): - DT is very interpretable - KNN is moderately interpretable - SVM-RBF not interpretable at all\nNon-linearity: - DT Handle non-linearity, but boundaries are boxy - KNN can identify non-linear boundaries - SVM-RBF is a great choice for non-linearity\nScalability: - DT is very scalable, fast and can be done on large datasets - KNN is not scalable, because the distance needs to be calculated - SVM-RB is scalable, optimization is complicated so will be expensive"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#recap-2",
    "href": "slides-05-preprocessing-pipelines.html#recap-2",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Recap",
    "text": "Recap\n\n\n\n\n\n\n\n\n\nAspect\nDecision Trees\nK-Nearest Neighbors (KNN)\nSupport Vector Machines (SVM) with RBF Kernel\n\n\n\n\nSensitivity to Outliers\n\n\n\n\n\nMemory Usage\n\n\n\n\n\nTraining Time\n\n\n\n\n\nPrediction Time\n\n\n\n\n\nMulticlass support\n\n\n\n\n\n\n\nSensitivity to Outliers - DT has some sensitivity to outliers (based on where the splits happen) - KNN is distance based, not that sensitive to outliers, but depends on the number of neighbours - SVM-RBF robust to outliers\nMemory Usage - DT is is very memory efficient, stores the model not the data - KNN uses a lot of memory, all data sets stored in memory - SVM-RBF is reasonably memory efficient, stores only support vectors\nTraining Time - DT training time is higher than KNN - KNN is 0, all points are stored - SVM-RBF much lower compared to KNN and DT\nPrediction Time - DT, also very efficient at predicting - KNN is high, all the work happens here - SVM-RBF, very efficient at predicting\nMulticlass Support - DT, multi-class is fine - KNN, multi-class is fine - SVM-RBF, bit complicated"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#iclicker-exercise-5.1",
    "href": "slides-05-preprocessing-pipelines.html#iclicker-exercise-5.1",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "(iClicker) Exercise 5.1",
    "text": "(iClicker) Exercise 5.1\niClicker cloud join link: https://join.iclicker.com/VYFJ\nTake a guess: In your machine learning project, how much time will you typically spend on data preparation and transformation?\n\n\n~80% of the project time\n\n\n~20% of the project time\n\n\n~50% of the project time\n\n\nNone. Most of the time will be spent on model building\n\n\nThe question is adapted from here."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#iclicker-exercise-5.2",
    "href": "slides-05-preprocessing-pipelines.html#iclicker-exercise-5.2",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "(iClicker) Exercise 5.2",
    "text": "(iClicker) Exercise 5.2\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nStandardScaler ensures a fixed range (i.e., minimum and maximum values) for the features.\n\n\nStandardScaler calculates mean and standard deviation for each feature separately.\n\n\nIn general, it’s a good idea to apply scaling on numeric features before training \\(k\\)-NN or SVM RBF models.\n\n\nThe transformed feature values might be hard to interpret for humans.\n\n\nAfter applying SimpleImputer The transformed data has a different shape than the original data."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#iclicker-exercise-5.3",
    "href": "slides-05-preprocessing-pipelines.html#iclicker-exercise-5.3",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "(iClicker) Exercise 5.3",
    "text": "(iClicker) Exercise 5.3\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nYou can have scaling of numeric features, one-hot encoding of categorical features, and scikit-learn estimator within a single pipeline.\n\n\nOnce you have a scikit-learn pipeline object with an estimator as the last step, you can call fit, predict, and score on it.\n\n\nYou can carry out data splitting within scikit-learn pipeline.\n\n\nWe have to be careful of the order we put each transformation and model in a pipeline.\n\n\n\nA: False; It doesn’t make sense to apply one hot encoding to numeric features, and it doesn’t make sense to apply standard scalar to categorical features. Sequence doesn’t make sense, we need column transformers\nB: True; can do this as long as the estimator is the last step\nC: False\nD: True;"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#break",
    "href": "slides-05-preprocessing-pipelines.html#break",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Break",
    "text": "Break\nLet’s take a break!\n /"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#preprocessing-motivation-example",
    "href": "slides-05-preprocessing-pipelines.html#preprocessing-motivation-example",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Preprocessing motivation: example",
    "text": "Preprocessing motivation: example\nYou’re trying to find a suitable date based on:\n\nAge (closer to yours is better).\nNumber of Facebook Friends (closer to your social circle is ideal)."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#preprocessing-motivation-example-1",
    "href": "slides-05-preprocessing-pipelines.html#preprocessing-motivation-example-1",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Preprocessing motivation: example",
    "text": "Preprocessing motivation: example\n\nYou are 30 years old and have 250 Facebook friends.\n\n\n\n\n\n\n\n\n\n\n\nPerson\nAge\n#FB Friends\nEuclidean Distance Calculation\nDistance\n\n\n\n\nA\n25\n400\n√(5² + 150²)\n150.08\n\n\nB\n27\n300\n√(3² + 50²)\n50.09\n\n\nC\n30\n500\n√(0² + 250²)\n250.00\n\n\nD\n60\n250\n√(30² + 0²)\n30.00\n\n\n\nBased on the distances, the two nearest neighbors (2-NN) are:\n\nPerson D (Distance: 30.00)\nPerson B (Distance: 50.09)\n\nWhat’s the problem here?"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#imputation-fill-the-gaps",
    "href": "slides-05-preprocessing-pipelines.html#imputation-fill-the-gaps",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Imputation: Fill the gaps! (🟩 🟧 🟦)",
    "text": "Imputation: Fill the gaps! (🟩 🟧 🟦)\nFill in missing data using a chosen strategy:\n\nMean: Replace missing values with the average of the available data.\nMedian: Use the middle value.\nMost Frequent: Use the most common value (mode).\nKNN Imputation: Fill based on similar neighbors.\n\nExample:\nFill in missing values like filling empty seats in a classroom with the average student.\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='mean')\nX_imputed = imputer.fit_transform(X)"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#scaling-everything-to-the-same-range",
    "href": "slides-05-preprocessing-pipelines.html#scaling-everything-to-the-same-range",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Scaling: Everything to the same range! (📉 📈)",
    "text": "Scaling: Everything to the same range! (📉 📈)\nEnsure all features have a comparable range.\n\nStandardScaler: Mean = 0, Standard Deviation = 1.\nMinMaxScaler: Scales features to a [0, 1] range.\nRobustScaler: Scales features using median and quantiles.\n\nExample:\nRescaling everyone’s height to make basketball players and gymnasts comparable.\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#one-hot-encoding-1-0-0",
    "href": "slides-05-preprocessing-pipelines.html#one-hot-encoding-1-0-0",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "One-Hot encoding: 🍎 → 1️⃣ 0️⃣ 0️⃣",
    "text": "One-Hot encoding: 🍎 → 1️⃣ 0️⃣ 0️⃣\nConvert categorical features into binary columns.\n\nCreates new binary columns for each category.\nUseful for handling categorical data in machine learning models.\n\nExample:\nTurn “Apple, Banana, Orange” into binary columns:\n\n\n\nFruit\n🍎\n🍌\n🍊\n\n\n\n\nApple 🍎\n1\n0\n0\n\n\nBanana 🍌\n0\n1\n0\n\n\nOrange 🍊\n0\n0\n1\n\n\n\nfrom sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder()\nX_encoded = encoder.fit_transform(X)"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#ordinal-encoding-ranking-matters-1",
    "href": "slides-05-preprocessing-pipelines.html#ordinal-encoding-ranking-matters-1",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Ordinal encoding: Ranking matters! (⭐️⭐️⭐️⭐️⭐️ → 1️⃣)",
    "text": "Ordinal encoding: Ranking matters! (⭐️⭐️⭐️⭐️⭐️ → 1️⃣)\nConvert categories into integer values that have a meaningful order.\n\nAssign integers based on order or rank.\nUseful when there is an inherent ranking in the data.\n\nExample:\nTurn “Poor, Average, Good” into 1, 2, 3:\n\n\n\nRating\nOrdinal\n\n\n\n\nPoor\n1\n\n\nAverage\n2\n\n\nGood\n3\n\n\n\nfrom sklearn.preprocessing import OrdinalEncoder\nencoder = OrdinalEncoder()\nX_ordinal = encoder.fit_transform(X)"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#transformers",
    "href": "slides-05-preprocessing-pipelines.html#transformers",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Transformers",
    "text": "Transformers\n\nAre used to transform or preprocess data.\nImplement the fit and transform methods.\n\nfit(X): Learns parameters from the data.\ntransform(X): Applies the learned transformation to the data.\n\nExamples:\n\nImputation (SimpleImputer): Fills missing values.\nScaling (StandardScaler): Standardizes features."
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#estimators",
    "href": "slides-05-preprocessing-pipelines.html#estimators",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "Estimators",
    "text": "Estimators\n\nUsed to make predictions.\nImplement fit and predict methods.\n\nfit(X, y): Learns from labeled data.\npredict(X): Makes predictions on new data.\n\nExamples: DecisionTreeClassifier, SVC, KNeighborsClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\ntree_clf = DecisionTreeClassifier()"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#the-golden-rule-in-feature-transformations",
    "href": "slides-05-preprocessing-pipelines.html#the-golden-rule-in-feature-transformations",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "The golden rule in feature transformations",
    "text": "The golden rule in feature transformations\n\nNever transform the entire dataset at once!\nWhy? It leads to data leakage — using information from the test set in your training process, which can artificially inflate model performance.\nFit transformers like scalers and imputers on the training set only.\nApply the transformations to both the training and test sets separately.\n\nExample:\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)"
  },
  {
    "objectID": "slides-05-preprocessing-pipelines.html#sklearn-pipelines",
    "href": "slides-05-preprocessing-pipelines.html#sklearn-pipelines",
    "title": "Lecture 5: Preprocessing and sklearn pipelines",
    "section": "sklearn Pipelines",
    "text": "sklearn Pipelines\n\nPipeline is a way to chain multiple steps (e.g., preprocessing + model fitting) into a single workflow.\nSimplify the code and improves readability.\nReduce the risk of data leakage by ensuring proper transformation of the training and test sets.\nAutomatically apply transformations in sequence.\n\nExample:\nChaining a StandardScaler with a KNeighborsClassifier model.\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\n\npipeline = make_pipeline(StandardScaler(), KNeighborsClassifier())\n\npipeline.fit(X_train, y_train)\ny_pred = pipeline.predict(X_test)"
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#announcements",
    "href": "slides-04-kNNs-SVM-RBF.html#announcements",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Announcements",
    "text": "Announcements\n\nMy office hours are Wednesdays from 1:30 - 2:30 PM in ICCS 253.\nhw2 was due yesterday.\nSyllabus quiz due date is September 19th, 11:59 pm.\nHomework 3 (hw3) has been released (Due: Oct 1st, 11:59 pm)\n\nYou can work in pairs for this assignment.\n\nIf you were on the waitlist, you should know your enrollment status now. Attendance in tutorials is not mandatory; they are optional and will follow an office-hour format. You are free to attend any tutorial session of your choice.\nThe lecture notes within these notebooks align with the content presented in the videos. Even though we do not cover all the content from these notebooks during lectures, it’s your responsibility to go through them on your own."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#class-3-demo-continued",
    "href": "slides-04-kNNs-SVM-RBF.html#class-3-demo-continued",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Class 3 Demo Continued",
    "text": "Class 3 Demo Continued\nFor the first 15-20 mins, we’ll try to finish off the demo from Lecture 3.\nYou can find the demo repo here, though you have probably created a repo already locally from Thursday.\nYou can find the finished version of the repo in my demo account after class."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-these-questions",
    "href": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-these-questions",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Pod Work: Discuss these questions",
    "text": "Pod Work: Discuss these questions\n\nWhy do we split data?\nWhat are train/valid/test splits?\nWhat are the benefits of cross-validation?\nWhat’s the fundamental trade-off in supervised machine learning?\nWhat is the golden rule of machine learning?"
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#recap-the-fundamental-tradeoff",
    "href": "slides-04-kNNs-SVM-RBF.html#recap-the-fundamental-tradeoff",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Recap: The fundamental tradeoff",
    "text": "Recap: The fundamental tradeoff\nAs you increase the model complexity, training score tends to go up and the gap between train and validation scores tends to go up."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-this-question",
    "href": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-this-question",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Pod Work: Discuss this question",
    "text": "Pod Work: Discuss this question\nWhich of the following statements about overfitting is true?\n\n\nOverfitting is always beneficial for model performance on unseen data.\n\n\nSome degree of overfitting is common in most real-world problems.\n\n\nOverfitting ensures the model will perform well in real-world scenarios.\n\n\nOverfitting occurs when the model learns the training data too closely, including its noise and outliers."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-this-question-1",
    "href": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-this-question-1",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Pod Work: Discuss this question",
    "text": "Pod Work: Discuss this question\nWhich of the following scenarios do NOT necessarily imply overfitting?\n\n\nTraining accuracy is 0.98 while validation accuracy is 0.60.\n\n\nThe model is too specific to the training data.\n\n\nThe decision boundary of a classifier is wiggly and highly irregular.\n\n\nTraining and validation accuracies are both approximately 0.88."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-this-question-2",
    "href": "slides-04-kNNs-SVM-RBF.html#pod-work-discuss-this-question-2",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Pod Work: Discuss this question",
    "text": "Pod Work: Discuss this question\nHow might one address the issue of underfitting in a machine learning model.\n\n\nIntroduce more noise to the training data.\n\n\nRemove features that might be relevant to the prediction.\n\n\nIncrease the model’s complexity, possibly by adding more parameter or features\n\n\nUse a smaller dataset for training.\n\n\nUse a larger dataset for training."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#overfitting-and-underfitting",
    "href": "slides-04-kNNs-SVM-RBF.html#overfitting-and-underfitting",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Overfitting and underfitting",
    "text": "Overfitting and underfitting\n\nAn overfit model matches the training set so closely that it fails to make correct predictions on new unseen data.\n\nAn underfit model is too simple and does not even make good predictions on the training data"
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#overfitting-and-underfitting-1",
    "href": "slides-04-kNNs-SVM-RBF.html#overfitting-and-underfitting-1",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Overfitting and underfitting",
    "text": "Overfitting and underfitting\n\nSource"
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#break",
    "href": "slides-04-kNNs-SVM-RBF.html#break",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Break",
    "text": "Break\nLet’s take a break!"
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#iclicker-4.1",
    "href": "slides-04-kNNs-SVM-RBF.html#iclicker-4.1",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "iClicker 4.1",
    "text": "iClicker 4.1\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nAnalogy-based models find examples from the test set that are most similar to the query example we are predicting.\n\n\nEuclidean distance will always have a non-negative value.\n\n\nWith \\(k\\)-NN, setting the hyperparameter \\(k\\) to larger values typically reduces training error.\n\n\nSimilar to decision trees, \\(k\\)-NNs finds a small set of good features.\n\n\nIn \\(k\\)-NN, with \\(k &gt; 1\\), the classification of the closest neighbour to the test example always contributes the most to the prediction."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#iclicker-4.2",
    "href": "slides-04-kNNs-SVM-RBF.html#iclicker-4.2",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "iClicker 4.2",
    "text": "iClicker 4.2\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\n\\(k\\)-NN may perform poorly in high-dimensional space (say, d &gt; 1000).\n\n\nIn sklearn’s SVC classifier, large values of gamma tend to result in higher training score but probably lower validation score.\n\n\nIf we increase both gamma and C, we can’t be certain if the model becomes more complex or less complex."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#similarity-based-algorithms",
    "href": "slides-04-kNNs-SVM-RBF.html#similarity-based-algorithms",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Similarity-based algorithms",
    "text": "Similarity-based algorithms\n\nUse similarity or distance metrics to predict targets.\nExamples: \\(k\\)-nearest neighbors, Support Vector Machines (SVMs) with RBF Kernel."
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#k-nearest-neighbours",
    "href": "slides-04-kNNs-SVM-RBF.html#k-nearest-neighbours",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "\\(k\\)-nearest neighbours",
    "text": "\\(k\\)-nearest neighbours\n\nClassifies an object based on the majority label among its \\(k\\) closest neighbors.\nMain hyperparameter: \\(k\\) or n_neighbors in sklearn\nDistance Metrics: Euclidean\nStrengths: simple and intuitive, can learn complex decision boundaries\nChallenges: Sensitive to the choice of distance metric and scaling (coming up)."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#announcements",
    "href": "slides-02-terminology-decision-trees.html#announcements",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Announcements",
    "text": "Announcements\n\nThings due this week\n\nHomework 1 (hw1): Due Sept 10 11:59pm\n\nHomework 2 (hw2) has been released (Due: Sept 16, 11:59pm)\n\nThere is some autograding in this homework.\n\nYou can find the tentative due dates for all deliverables here.\nPlease monitor Piazza (especially pinned posts and instructor posts) for announcements.\nI’ll assume that you’ve watched the pre-lecture videos."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#surveys",
    "href": "slides-02-terminology-decision-trees.html#surveys",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Surveys",
    "text": "Surveys\n\nPlease complete the “Getting to know you” survey on Canvas.\nAlso, please complete the anonymous restaurant survey on Qualtrics here.\n\nWe will try to analyze this data set in the coming weeks."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#gradescope",
    "href": "slides-02-terminology-decision-trees.html#gradescope",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Gradescope",
    "text": "Gradescope\nMake sure you can submit your assignment before the hw1 due date!\nIt is not required for you to work in a GitHub repository, but we highly encourage you to do this!\nFor students on the waitlist: Gradescope Entry code is MRZX7Z."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#checklist-for-you-in-the-first-week",
    "href": "slides-02-terminology-decision-trees.html#checklist-for-you-in-the-first-week",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Checklist for you in the first week",
    "text": "Checklist for you in the first week\n\nAre you able to access course Canvas shell?\nAre you able to access course Piazza?\nAre you able to access Gradescope? (If not, refer to the Gradescope Student Guide.)\nAre you able to access iClicker Cloud for this course?\nDid you follow the setup instructions here to create a course conda environment on your computer?\nDid you complete the “Getting to know you” survey on Canvas?\nDid you complete the anonymous restaurant survey on Qualtrics?\nAre you almost finished or at least started with homework 1?"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#suggested-workflow-for-working-with-jupyter-notebooks",
    "href": "slides-02-terminology-decision-trees.html#suggested-workflow-for-working-with-jupyter-notebooks",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Suggested Workflow for working with Jupyter Notebooks",
    "text": "Suggested Workflow for working with Jupyter Notebooks\n\nCreate a folder on your computer that will have all the CPSC 330 repos:\n\n~/School/Year3/CPSC330/ &lt;– Consider this your CPSC parent folder\n\nCreate subfolders for: hw, class, practice\nIn the hw folder, you will then clone hw1, hw2, hw3, etc…\nIn the class folder, you will clone the CPSC330-2024W1 repo which contains all the class jupyter notebooks\n\nDo not make any changes to files in this directory/repo, you will have trouble when you pull stuff during each class.\nIf you did make changes, you can reset to the last commit and DESTROY any changes you made (be careful with this command) using: git reset --hard\n\nIn the practice folder, you can copy any notebooks (.ipynb) and files (like data/*.csv) you want to try running locally and experiment"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#recap-machine-learning-workflow",
    "href": "slides-02-terminology-decision-trees.html#recap-machine-learning-workflow",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Recap: Machine learning workflow",
    "text": "Recap: Machine learning workflow\nSupervised machine learning is quite flexible; it can be used on a variety of problems and different kinds of data. Here is a typical workflow of a supervised machine learning systems.\n\n\n\n\n\n\nWe will build machine learning pipelines in this course, focusing on some of the steps above."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#recap-what-is-ml",
    "href": "slides-02-terminology-decision-trees.html#recap-what-is-ml",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Recap: What is ML?",
    "text": "Recap: What is ML?\n\nML uses data to build models that find patterns, make predictions, or generate content.\nIt helps computers learn from data to make decisions.\nNo one model works for every situation."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#recap-supervised-learning",
    "href": "slides-02-terminology-decision-trees.html#recap-supervised-learning",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Recap: Supervised learning",
    "text": "Recap: Supervised learning\n\nWe wish to find a model function \\(f\\) that relates \\(X\\) to \\(y\\).\nWe use the model function to predict targets of new examples.\n\n\n\n\n\n\nIn the first part of this course, we’ll focus on supervised machine learning."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#iclicker-2.1-terminology",
    "href": "slides-02-terminology-decision-trees.html#iclicker-2.1-terminology",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "iClicker 2.1: Terminology",
    "text": "iClicker 2.1: Terminology\niClicker cloud join link: https://join.iclicker.com/VYFJ"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#select-all-of-the-following-statements-which-are-true-iclicker",
    "href": "slides-02-terminology-decision-trees.html#select-all-of-the-following-statements-which-are-true-iclicker",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Select all of the following statements which are True (iClicker)",
    "text": "Select all of the following statements which are True (iClicker)\n\nPredicting spam is an example of machine learning.\nPredicting housing prices is not an example of machine learning.\nFor problems such as spelling correction, translation, face recognition, spam identification, if you are a domain expert, it’s usually faster and scalable to come up with a robust set of rules manually rather than building a machine learning model.\nIf you are asked to write a program to find all prime numbers up to a limit, it is better to implement one of the algorithms for doing so rather than using machine learning.\nGoogle News is likely be using machine learning to organize news."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#iclicker-2.2-supervised-vs-unsupervised",
    "href": "slides-02-terminology-decision-trees.html#iclicker-2.2-supervised-vs-unsupervised",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "iClicker 2.2: Supervised vs unsupervised",
    "text": "iClicker 2.2: Supervised vs unsupervised\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are examples of supervised machine learning\n\n\nFinding groups of similar properties in a real estate data set.\n\n\nPredicting whether someone will have a heart attack or not on the basis of demographic, diet, and clinical measurement.\n\n\nGrouping articles on different topics from different news sources (something like the Google News app).\n\n\nDetecting credit card fraud based on examples of fraudulent and non-fraudulent transactions.\n\n\nGiven some measure of employee performance, identify the key factors which are likely to influence their performance."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#iclicker-2.3-classification-vs.-regression",
    "href": "slides-02-terminology-decision-trees.html#iclicker-2.3-classification-vs.-regression",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "iClicker 2.3: Classification vs. Regression",
    "text": "iClicker 2.3: Classification vs. Regression\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are examples of regression problems\n\n\nPredicting the price of a house based on features such as number of bedrooms and the year built.\n\n\nPredicting if a house will sell or not based on features like the price of the house, number of rooms, etc.\n\n\nPredicting percentage grade in CPSC 330 based on past grades.\n\n\nPredicting whether you should bicycle tomorrow or not based on the weather forecast.\n\n\nPredicting appropriate thermostat temperature based on the wind speed and the number of people in a room."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#ml-framework-in-cpsc-330",
    "href": "slides-02-terminology-decision-trees.html#ml-framework-in-cpsc-330",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "ML Framework in CPSC 330",
    "text": "ML Framework in CPSC 330\n\nThere are many frameworks to do do machine learning.\nWe’ll mainly be using scikit-learn framework."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#running-example",
    "href": "slides-02-terminology-decision-trees.html#running-example",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Running example",
    "text": "Running example\nImagine you’re in the fortunate situation where, after graduating, you have a few job offers and need to decide which one to choose. You want to pick the job that will likely make you the happiest. To help with your decision, you collect data from like-minded people. Here are the first few rows of this toy dataset.\n\ntoy_happiness_df = pd.read_csv(DATA_DIR + 'toy_job_happiness.csv')\ntoy_happiness_df\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\nhappy?\n\n\n\n\n0\n0\n70000\n0\n1\nUnhappy\n\n\n1\n1\n60000\n0\n0\nUnhappy\n\n\n2\n1\n80000\n1\n0\nHappy\n\n\n3\n1\n110000\n0\n1\nHappy\n\n\n4\n1\n120000\n1\n0\nHappy\n\n\n5\n1\n150000\n1\n1\nHappy\n\n\n6\n0\n150000\n1\n0\nUnhappy"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#features-target-example",
    "href": "slides-02-terminology-decision-trees.html#features-target-example",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Features, target, example",
    "text": "Features, target, example\n\nWhat are the features \\(X\\)?\n\nfeatures = inputs = predictors = explanatory variables = regressors = independent variables = covariates\n\nWhat’s the target \\(y\\)?\n\ntarget = output = outcome = response variable = dependent variable = labels\n\nCan you think of other relevant features for this problem?\nWhat is an example?"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#classification-vs.-regression",
    "href": "slides-02-terminology-decision-trees.html#classification-vs.-regression",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Classification vs. Regression",
    "text": "Classification vs. Regression\n\nIs this a classification problem or a regression problem?\n\n\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\nhappy?\n\n\n\n\n0\n0\n70000\n0\n1\nUnhappy\n\n\n1\n1\n60000\n0\n0\nUnhappy\n\n\n2\n1\n80000\n1\n0\nHappy\n\n\n3\n1\n110000\n0\n1\nHappy\n\n\n4\n1\n120000\n1\n0\nHappy\n\n\n5\n1\n150000\n1\n1\nHappy\n\n\n6\n0\n150000\n1\n0\nUnhappy"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#prediction-vs.-inference",
    "href": "slides-02-terminology-decision-trees.html#prediction-vs.-inference",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Prediction vs. Inference",
    "text": "Prediction vs. Inference\n\nInference is using the model to understand the relationship between the features and the target\n\nWhy certain factors influence happiness?\n\nPrediction is using the model to predict the target value for new examples based on learned patterns.\nOf course these goals are related, and in many situations we need both."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#training",
    "href": "slides-02-terminology-decision-trees.html#training",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Training",
    "text": "Training\n\nIn supervised ML, the goal is to learn a function that maps input features (\\(X\\)) to a target (\\(y\\)).\nThe relationship between \\(X\\) and \\(y\\) is often complex, making it difficult to define mathematically.\nWe use algorithms to approximate this complex relationship between \\(X\\) and \\(y\\).\nTraining is the process of applying an algorithm to learn the best function (or model) that maps \\(X\\) to \\(y\\).\nIn this course, I’ll help you develop an intuition for how these models work and demonstrate how to use them in a machine learning pipeline."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#separating-x-and-y",
    "href": "slides-02-terminology-decision-trees.html#separating-x-and-y",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Separating \\(X\\) and \\(y\\)",
    "text": "Separating \\(X\\) and \\(y\\)\n\nIn order to train a model we need to separate \\(X\\) and \\(y\\) from the dataframe.\n\n\nX = toy_happiness_df.drop(columns=[\"happy?\"]) # Extract the feature set by removing the target column \"happy?\"\ny = toy_happiness_df[\"happy?\"] # Extract the target variable \"happy?\""
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#baseline",
    "href": "slides-02-terminology-decision-trees.html#baseline",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Baseline",
    "text": "Baseline\n\nLet’s try a simplest algorithm of predicting the most popular target!\n\n\nfrom sklearn.dummy import DummyClassifier\n# Initialize the DummyClassifier to always predict the most frequent class\nmodel = DummyClassifier(strategy=\"most_frequent\")\n# Train the model on the feature set X and target variable y\nmodel.fit(X, y)\n# Add the predicted values as a new column in the dataframe\ntoy_happiness_df['dummy_predictions'] = model.predict(X)\n# Show the dataframe\ntoy_happiness_df\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\nhappy?\ndummy_predictions\n\n\n\n\n0\n0\n70000\n0\n1\nUnhappy\nHappy\n\n\n1\n1\n60000\n0\n0\nUnhappy\nHappy\n\n\n2\n1\n80000\n1\n0\nHappy\nHappy\n\n\n3\n1\n110000\n0\n1\nHappy\nHappy\n\n\n4\n1\n120000\n1\n0\nHappy\nHappy\n\n\n5\n1\n150000\n1\n1\nHappy\nHappy\n\n\n6\n0\n150000\n1\n0\nUnhappy\nHappy"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#pre-intuition",
    "href": "slides-02-terminology-decision-trees.html#pre-intuition",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Pre-Intuition",
    "text": "Pre-Intuition\nLet’s play 20 questions! You can ask me up to 20 Yes/No questions to figure out the answer.  \nI’m thinking of a person - who is it ?"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#intuition",
    "href": "slides-02-terminology-decision-trees.html#intuition",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Intuition",
    "text": "Intuition\n\nDecision trees find the “best” way to split data to make predictions.\nEach split is based on a question, like ‘Are the colleagues supportive?’\nThe goal is to group data by similar outcomes at each step.\nNow, let’s see a decision tree using sklearn."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#decision-tree-with-sklearn",
    "href": "slides-02-terminology-decision-trees.html#decision-tree-with-sklearn",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Decision tree with sklearn",
    "text": "Decision tree with sklearn\nLet’s train a simple decision tree on our toy dataset.\n\nfrom sklearn.tree import DecisionTreeClassifier # import the classifier\nfrom sklearn.tree import plot_tree\n\nmodel = DecisionTreeClassifier(max_depth=2, random_state=1) # Create a class object\nmodel.fit(X, y)\nplot_tree(model, filled=True, feature_names = X.columns, class_names=[\"Happy\", \"Unhappy\"], \n          impurity = False, fontsize=12);"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#prediction",
    "href": "slides-02-terminology-decision-trees.html#prediction",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Prediction",
    "text": "Prediction\n\nGiven a new example, how does a decision tree predict the class of this example?\n\nWhat would be the prediction for the example below using the tree above?\n\nsupportive_colleagues = 1, salary = 60000, coffee_machine = 0, vegan_boss = 1,"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#prediction-with-sklearn",
    "href": "slides-02-terminology-decision-trees.html#prediction-with-sklearn",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Prediction with sklearn",
    "text": "Prediction with sklearn\n\nWhat would be the prediction for the example below using the tree above?\n\nsupportive_colleagues = 1, salary = 60000, coffee_machine = 0, vegan_boss = 1,\n\n\n\ntest_example = [[1, 60000, 0, 1]]\nprint(\"Model prediction: \", model.predict(test_example))\nplot_tree(model, filled=True, feature_names = X.columns, class_names = [\"Happy\", \"Unhappy\"], impurity = False, fontsize=9);\n\nModel prediction:  ['Unhappy']"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#training-high-level",
    "href": "slides-02-terminology-decision-trees.html#training-high-level",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Training (high level)",
    "text": "Training (high level)\n\nHow many possible questions could we ask in this context?\n\n\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\n\n\n\n\n0\n0\n70000\n0\n1\n\n\n1\n1\n60000\n0\n0\n\n\n2\n1\n80000\n1\n0\n\n\n3\n1\n110000\n0\n1\n\n\n4\n1\n120000\n1\n0\n\n\n5\n1\n150000\n1\n1\n\n\n6\n0\n150000\n1\n0"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#training-high-level-1",
    "href": "slides-02-terminology-decision-trees.html#training-high-level-1",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Training (high level)",
    "text": "Training (high level)\n\nDecision tree learning is a search process to find the “best” tree among many possible ones.\nWe evaluate questions using measures like information gain or the Gini index to find the most effective split.\nAt each step, we aim to split the data into groups with more certainty in their outcomes."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#parameters-vs.-hyperparameters",
    "href": "slides-02-terminology-decision-trees.html#parameters-vs.-hyperparameters",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Parameters vs. Hyperparameters",
    "text": "Parameters vs. Hyperparameters\n\nParameters\n\nThe questions (features and thresholds) used to split the data at each node.\nExample: salary &lt;= 75000 at the root node\n\n\nHyperparameters\n\nSettings that control tree growth, like max_depth, which limits how deep the tree can go."
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth1",
    "href": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth1",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Decision boundary with max_depth=1",
    "text": "Decision boundary with max_depth=1"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth2",
    "href": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth2",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Decision boundary with max_depth=2",
    "text": "Decision boundary with max_depth=2"
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#iclicker-2.5-baselines-and-decision-trees",
    "href": "slides-02-terminology-decision-trees.html#iclicker-2.5-baselines-and-decision-trees",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "iClicker 2.5: Baselines and Decision trees",
    "text": "iClicker 2.5: Baselines and Decision trees\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nChange in features (i.e., binarizing features above) would change DummyClassifier predictions.\n\n\npredict takes only X as argument whereas fit and score take both X and y as arguments.\n\n\nFor the decision tree algorithm to work, the feature values must be binary.\n\n\nThe prediction in a decision tree works by routing the example from the root to the leaf."
  },
  {
    "objectID": "slides-07.html#announcements",
    "href": "slides-07.html#announcements",
    "title": "Lecture 7: Linear models",
    "section": "Announcements",
    "text": "Announcements\n\nRemember Monday September 30th is a holiday, National Day for Truth and Reconciliation\n\nI encourage you to spend some reflecting on the Indigenous peoples of Canada. I invite you to explore the Beyond 94 project which tracks the progress of the 94 calls to action."
  },
  {
    "objectID": "slides-07.html#announcements-1",
    "href": "slides-07.html#announcements-1",
    "title": "Lecture 7: Linear models",
    "section": "Announcements",
    "text": "Announcements\n\nHW3 is due next week Tuesday, Oct 1st, 11:59 pm.\n\nYou can work in pairs for this assignment."
  },
  {
    "objectID": "slides-07.html#remarks-on-preprocessing",
    "href": "slides-07.html#remarks-on-preprocessing",
    "title": "Lecture 7: Linear models",
    "section": "Remarks on preprocessing",
    "text": "Remarks on preprocessing\n\nThere is no one-size-fits-all solution in data preprocessing, and decisions often involve a degree of subjectivity.\n\nExploratory data analysis and domain knowledge inform these decisions\n\nAlways consider the specific goals of your project when deciding how to encode features."
  },
  {
    "objectID": "slides-07.html#alternative-methods-for-scaling-reference",
    "href": "slides-07.html#alternative-methods-for-scaling-reference",
    "title": "Lecture 7: Linear models",
    "section": "Alternative methods for scaling (Reference)",
    "text": "Alternative methods for scaling (Reference)\n\nStandardScaler\n\nGood choice when the column follows a normal distribution or a distribution somewhat like a normal distribution.\n\nMinMaxScaler: Transform each feature to a desired range. Appropriate when\n\nGood choice for features such as human age, where there is a fixed range of values and the feature is uniformly distributed across the range\n\nNormalizer: Works on rows rather than columns. Normalize examples individually to unit norm.\n\nGood choice for frequency-type data\n\nLog scaling\n\nGood choice for features such as ratings per movies (power law distribution; a few movies have lots of ratings but most movies have very few ratings)\n\n…"
  },
  {
    "objectID": "slides-07.html#ordinal-encoding-vs.-one-hot-encoding",
    "href": "slides-07.html#ordinal-encoding-vs.-one-hot-encoding",
    "title": "Lecture 7: Linear models",
    "section": "Ordinal encoding vs. One-hot encoding",
    "text": "Ordinal encoding vs. One-hot encoding\n\nOrdinal Encoding: Encodes categorical features as an integer array.\nOne-hot Encoding: Creates binary columns for each category’s presence.\nSometimes how we encode a specific feature depends upon the context."
  },
  {
    "objectID": "slides-07.html#ordinal-encoding-vs.-one-hot-encoding-reference",
    "href": "slides-07.html#ordinal-encoding-vs.-one-hot-encoding-reference",
    "title": "Lecture 7: Linear models",
    "section": "Ordinal encoding vs. One-hot encoding (Reference)",
    "text": "Ordinal encoding vs. One-hot encoding (Reference)\n\nConsider weather feature and its four categories: Sunny (☀️), Cloudy (🌥️), Rainy (⛈️), Snowy (❄️)\nWhich encoding would you use in each of the following scenarios?\n\nPredicting traffic volume\nPredicting severity of weather-related road incidents"
  },
  {
    "objectID": "slides-07.html#ordinal-encoding-vs.-one-hot-encoding-reference-1",
    "href": "slides-07.html#ordinal-encoding-vs.-one-hot-encoding-reference-1",
    "title": "Lecture 7: Linear models",
    "section": "Ordinal encoding vs. One-hot encoding (Reference)",
    "text": "Ordinal encoding vs. One-hot encoding (Reference)\n\nConsider weather feature and its four categories: Sunny (☀️), Cloudy (🌥️), Rainy (⛈️), Snowy (❄️)\nPredicting traffic volume: Using one-hot encoding would make sense here because the impact of different weather conditions on traffic volume does not necessarily follow a clear order and different weather conditions could have very distinct effects.\nPredicting severity of weather-related road incidents: An ordinal encoding might be more appropriate if you define your weather categories from least to most severe as this could correlate directly with the likelihood or severity of incidents."
  },
  {
    "objectID": "slides-07.html#handle_unknown-ignore-of-onehotencoder",
    "href": "slides-07.html#handle_unknown-ignore-of-onehotencoder",
    "title": "Lecture 7: Linear models",
    "section": "handle_unknown = \"ignore\" of OneHotEncoder",
    "text": "handle_unknown = \"ignore\" of OneHotEncoder\n\nUse handle_unknown='ignore' with OneHotEncoder to safely ignore unseen categories during transform.\n\n\n\n\n\n\n\nQuestion for you to consider in your Group\n\n\nHow would you determine whether it is reasonable or not to set\nhandle_unknown = \"ignore\"?"
  },
  {
    "objectID": "slides-07.html#handle_unknown-ignore-of-onehotencoder-1",
    "href": "slides-07.html#handle_unknown-ignore-of-onehotencoder-1",
    "title": "Lecture 7: Linear models",
    "section": "handle_unknown = \"ignore\" of OneHotEncoder",
    "text": "handle_unknown = \"ignore\" of OneHotEncoder\n\nExample 1: Suppose you are building a model to predict customer behavior (e.g., purchase likelihood) based on features like location, device_type, and product_category. During training, you have observed a set of categories for product_category, but in the future, new product categories might be added.\n\n\n\nExample 2: You’re building a model to predict disease diagnosis based on symptoms, where each symptom is categorized (e.g., fever, headache, nausea)."
  },
  {
    "objectID": "slides-07.html#handle_unknown-ignore-of-onehotencoder-2",
    "href": "slides-07.html#handle_unknown-ignore-of-onehotencoder-2",
    "title": "Lecture 7: Linear models",
    "section": "handle_unknown = \"ignore\" of OneHotEncoder",
    "text": "handle_unknown = \"ignore\" of OneHotEncoder\n\nReasonable use: When unseen categories are less likely to impact the model’s prediction accuracy (e.g., product categories in e-commerce), and you prefer to avoid breaking the model.\nNot-so-reasonable use: When unseen categories could provide critical new information that could significantly alter predictions (e.g., in medical diagnostics), ignoring them could result in a poor or dangerous outcome."
  },
  {
    "objectID": "slides-07.html#dropif_binary-argument-of-onehotencoder-reference",
    "href": "slides-07.html#dropif_binary-argument-of-onehotencoder-reference",
    "title": "Lecture 7: Linear models",
    "section": "drop=\"if_binary\" argument of OneHotEncoder (Reference)",
    "text": "drop=\"if_binary\" argument of OneHotEncoder (Reference)\n\ndrop=‘if_binary’ argument in OneHotEncoder:\nReduces redundancy by dropping one of the columns if the feature is binary."
  },
  {
    "objectID": "slides-07.html#categorical-variables-with-too-many-categories",
    "href": "slides-07.html#categorical-variables-with-too-many-categories",
    "title": "Lecture 7: Linear models",
    "section": "Categorical variables with too many categories",
    "text": "Categorical variables with too many categories\n\nStrategies for categorical variables with too many categories:\n\nDimensionality reduction techniques\nBucketing categories into ‘others’\nClustering or grouping categories manually\nOnly considering top-N categories\n…"
  },
  {
    "objectID": "slides-07.html#dealing-with-text-features",
    "href": "slides-07.html#dealing-with-text-features",
    "title": "Lecture 7: Linear models",
    "section": "Dealing with text features",
    "text": "Dealing with text features\n\nPreprocessing text to fit into machine learning models using text vectorization.\nBag of words representation"
  },
  {
    "objectID": "slides-07.html#sklearn-countvectorizer",
    "href": "slides-07.html#sklearn-countvectorizer",
    "title": "Lecture 7: Linear models",
    "section": "sklearn CountVectorizer",
    "text": "sklearn CountVectorizer\n\nUse scikit-learn’s CountVectorizer to encode text data\nCountVectorizer: Transforms text into a matrix of token counts\nImportant parameters:\n\nmax_features: Control the number of features used in the model\nmax_df, min_df: Control document frequency thresholds\nngram_range: Defines the range of n-grams to be extracted\nstop_words: Enables the removal of common words that are typically uninformative in most applications, such as “and”, “the”, etc."
  },
  {
    "objectID": "slides-07.html#incorporating-text-features-in-a-machine-learning-pipeline",
    "href": "slides-07.html#incorporating-text-features-in-a-machine-learning-pipeline",
    "title": "Lecture 7: Linear models",
    "section": "Incorporating text features in a machine learning pipeline",
    "text": "Incorporating text features in a machine learning pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline\n\ntext_pipeline = make_pipeline(\n    CountVectorizer(),\n    SVC()\n)"
  },
  {
    "objectID": "slides-07.html#iclicker-exercise-6.2",
    "href": "slides-07.html#iclicker-exercise-6.2",
    "title": "Lecture 7: Linear models",
    "section": "(iClicker) Exercise 6.2",
    "text": "(iClicker) Exercise 6.2\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nhandle_unknown=\"ignore\" would treat all unknown categories equally.\n\n\nAs you increase the value for max_features hyperparameter of CountVectorizer the training score is likely to go up.\n\n\nSuppose you are encoding text data using CountVectorizer. If you encounter a word in the validation or the test split that’s not available in the training data, we’ll get an error.\n\n\nIn the code below, inside cross_validate, each fold might have slightly different number of features (columns) in the fold.\n\n\npipe = (CountVectorizer(), SVC())\ncross_validate(pipe, X_train, y_train)"
  },
  {
    "objectID": "slides-07.html#recap-dealing-with-text-features",
    "href": "slides-07.html#recap-dealing-with-text-features",
    "title": "Lecture 7: Linear models",
    "section": "Recap: Dealing with text features",
    "text": "Recap: Dealing with text features\n\nPreprocessing text to fit into machine learning models using text vectorization.\nBag of words representation"
  },
  {
    "objectID": "slides-07.html#recap-sklearn-countvectorizer",
    "href": "slides-07.html#recap-sklearn-countvectorizer",
    "title": "Lecture 7: Linear models",
    "section": "Recap: sklearn CountVectorizer",
    "text": "Recap: sklearn CountVectorizer\n\nUse scikit-learn’s CountVectorizer to encode text data\nCountVectorizer: Transforms text into a matrix of token counts\nImportant parameters:\n\nmax_features: Control the number of features used in the model\nmax_df, min_df: Control document frequency thresholds\nngram_range: Defines the range of n-grams to be extracted\nstop_words: Enables the removal of common words that are typically uninformative in most applications, such as “and”, “the”, etc."
  },
  {
    "objectID": "slides-07.html#recap-incorporating-text-features-in-a-machine-learning-pipeline",
    "href": "slides-07.html#recap-incorporating-text-features-in-a-machine-learning-pipeline",
    "title": "Lecture 7: Linear models",
    "section": "Recap: Incorporating text features in a machine learning pipeline",
    "text": "Recap: Incorporating text features in a machine learning pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline\n\ntext_pipeline = make_pipeline(\n    CountVectorizer(),\n    SVC()\n)"
  },
  {
    "objectID": "slides-07.html#iclicker-exercise-6.2-1",
    "href": "slides-07.html#iclicker-exercise-6.2-1",
    "title": "Lecture 7: Linear models",
    "section": "(iClicker) Exercise 6.2",
    "text": "(iClicker) Exercise 6.2\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nhandle_unknown=\"ignore\" would treat all unknown categories equally.\n\n\nAs you increase the value for max_features hyperparameter of CountVectorizer the training score is likely to go up.\n\n\nSuppose you are encoding text data using CountVectorizer. If you encounter a word in the validation or the test split that’s not available in the training data, we’ll get an error.\n\n\nIn the code below, inside cross_validate, each fold might have slightly different number of features (columns) in the fold.\n\n\npipe = (CountVectorizer(), SVC())\ncross_validate(pipe, X_train, y_train)"
  },
  {
    "objectID": "slides-07.html#linear-models",
    "href": "slides-07.html#linear-models",
    "title": "Lecture 7: Linear models",
    "section": "Linear models",
    "text": "Linear models\n\n\n\nLinear models make an assumption that the relationship between X and y is linear.\nIn this case, with only one feature, our model is a straight line.\nWhat do we need to represent a line?\n\nSlope (\\(w_1\\)): Determines the angle of the line.\nY-intercept (\\(w_0\\)): Where the line crosses the y-axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking predictions\n\n\\(\\hat{y} = w_1 \\times \\text{# hours studied} + w_0\\)"
  },
  {
    "objectID": "slides-07.html#ridge-vs.-linearregression",
    "href": "slides-07.html#ridge-vs.-linearregression",
    "title": "Lecture 7: Linear models",
    "section": "Ridge vs. LinearRegression",
    "text": "Ridge vs. LinearRegression\n\nOrdinary linear regression is sensitive to multicolinearity and overfitting\nMulticolinearity: Overlapping and redundant features. Most of the real-world datasets have colinear features.\n\nLinear regression may produce large and unstable coefficients in such cases.\nRidge adds a parameter to control the complexity of a model. Finds a line that balances fit and prevents overly large coefficients."
  },
  {
    "objectID": "slides-07.html#when-to-use-what",
    "href": "slides-07.html#when-to-use-what",
    "title": "Lecture 7: Linear models",
    "section": "When to use what?",
    "text": "When to use what?\n\nLinearRegression\n\nWhen interpretability is key, and no multicollinearity exists\n\nRidge\n\nWhen you have multicollinearity (highly correlated features).\nWhen you want to prevent overfitting in linear models.\nWhen model stability is important.\n\nIn this course, we’ll use Ridge."
  },
  {
    "objectID": "slides-07.html#logistic-regression",
    "href": "slides-07.html#logistic-regression",
    "title": "Lecture 7: Linear models",
    "section": "Logistic regression",
    "text": "Logistic regression\n\nSuppose your target is binary: pass or fail\nLogistic regression is used for such binary classification tasks.\n\nLogistic regression predicts a probability that the given example belongs to a particular class.\nIt uses Sigmoid function to map any real-valued input into a value between 0 and 1, representing the probability of a specific outcome.\nA threshold (usually 0.5) is applied to the predicted probability to decide the final class label."
  },
  {
    "objectID": "slides-07.html#logistic-regression-decision-boundary",
    "href": "slides-07.html#logistic-regression-decision-boundary",
    "title": "Lecture 7: Linear models",
    "section": "Logistic regression: Decision boundary",
    "text": "Logistic regression: Decision boundary\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe decision boundary is the point on the x-axis where the corresponding predicted probability on the y-axis is 0.5."
  },
  {
    "objectID": "slides-07.html#parametric-vs.-non-parametric-models-high-level",
    "href": "slides-07.html#parametric-vs.-non-parametric-models-high-level",
    "title": "Lecture 7: Linear models",
    "section": "Parametric vs. non-Parametric models (high-level)",
    "text": "Parametric vs. non-Parametric models (high-level)\n\nImagine you are training a logistic regression model. For each of the following scenarios, identify how many parameters (weights and biases) will be learned.\nScenario 1: 100 features and 1,000 examples\nScenario 2: 100 features and 1 million examples"
  },
  {
    "objectID": "slides-07.html#parametric-vs.-non-parametric-models-high-level-1",
    "href": "slides-07.html#parametric-vs.-non-parametric-models-high-level-1",
    "title": "Lecture 7: Linear models",
    "section": "Parametric vs. non-Parametric models (high-level)",
    "text": "Parametric vs. non-Parametric models (high-level)\n\n\nParametric\n\nExamples: Logistic regression, linear regression, linear SVM\n\nModels with a fixed number of parameters, regardless of the dataset size\nSimple, computationally efficient, less prone to overfitting\nLess flexible, may not capture complex relationships\n\n\nNon parametric\n\nExamples: KNN, SVM RBF, Decision tree with no specific depth specified\nModels where the number of parameters grows with the dataset size. They do not assume a fixed form for the functions being learned.\nFlexible, can adapt to complex patterns\nComputationally expensive, risk of overfitting with noisy data"
  },
  {
    "objectID": "slides-07.html#iclicker-exercise-7.1",
    "href": "slides-07.html#iclicker-exercise-7.1",
    "title": "Lecture 7: Linear models",
    "section": "(iClicker) Exercise 7.1",
    "text": "(iClicker) Exercise 7.1\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nIncreasing the hyperparameter alpha of Ridge is likely to decrease model complexity.\n\n\nRidge can be used with datasets that have multiple features.\n\n\nWith Ridge, we learn one coefficient per training example.\n\n\nIf you train a linear regression model on a 2-dimensional problem (2 features), the model will learn 3 parameters: one for each feature and one for the bias term."
  },
  {
    "objectID": "slides-07.html#iclicker-exercise-7.2",
    "href": "slides-07.html#iclicker-exercise-7.2",
    "title": "Lecture 7: Linear models",
    "section": "(iClicker) Exercise 7.2",
    "text": "(iClicker) Exercise 7.2\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nIncreasing logistic regression’s C hyperparameter increases model complexity.\n\n\nThe raw output score can be used to calculate the probability score for a given prediction.\n\n\nFor linear classifier trained on \\(d\\) features, the decision boundary is a \\(d-1\\)-dimensional hyperparlane.\n\n\nA linear model is likely to be uncertain about the data points close to the decision boundary."
  },
  {
    "objectID": "slides-07.html#group-work-class-demo-live-coding",
    "href": "slides-07.html#group-work-class-demo-live-coding",
    "title": "Lecture 7: Linear models",
    "section": "Group Work: Class Demo & Live Coding",
    "text": "Group Work: Class Demo & Live Coding\nFor this demo, each student should click this link to create a new repo in their accounts, then clone that repo locally to follow along with the demo from today.\n  \nIf you really don’t want to create a repo,\n\nNavigate to the cpsc330-2024W1 repo\nrun git pull to pull the latest files in the course repo\nLook for the demo file here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to CPSC330! Here, you’ll find slides for CPSC 330 Section 103. These slides are based on the notes present here.\n\nClass times 🕘 5 pm to 6:20 pm\nWhere? 📍 West Mall Swing Space (SWNG) - 222, 2175 West Mall, Vancouver, BC V6T 1Z4"
  },
  {
    "objectID": "slides-06.html#announcements",
    "href": "slides-06.html#announcements",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Announcements",
    "text": "Announcements\n\nLecture recordings for the first two weeks have been made available - See Piazza.\nMy Office Hours\nHW3 is due next week Tuesday, Oct 1st, 11:59 pm.\n\nYou can work in pairs for this assignment."
  },
  {
    "objectID": "slides-06.html#quick-correction-on-exercise-5.3",
    "href": "slides-06.html#quick-correction-on-exercise-5.3",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Quick Correction on Exercise 5.3",
    "text": "Quick Correction on Exercise 5.3\n\nI accidentally said only D is true, but B is also true!\n\nSelect all of the following statements which are TRUE.\n\n\nYou can have scaling of numeric features, one-hot encoding of categorical features, and scikit-learn estimator within a single pipeline.\n\n\nOnce you have a scikit-learn pipeline object with an estimator as the last step, you can call fit, predict, and score on it.\n\n\nYou can carry out data splitting within scikit-learn pipeline.\n\n\nWe have to be careful of the order we put each transformation and model in a pipeline."
  },
  {
    "objectID": "slides-06.html#data",
    "href": "slides-06.html#data",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Data",
    "text": "Data\n\nX, y = make_blobs(n_samples=100, centers=3, random_state=12, cluster_std=5) # make synthetic data\nX_train_toy, X_test_toy, y_train_toy, y_test_toy = train_test_split(\n    X, y, random_state=5, test_size=0.4) # split it into training and test sets\n# Visualize the training data\nplt.scatter(X_train_toy[:, 0], X_train_toy[:, 1], label=\"Training set\", s=60)\nplt.scatter(\n    X_test_toy[:, 0], X_test_toy[:, 1], color=mglearn.cm2(1), label=\"Test set\", s=60\n)\nplt.legend(loc=\"upper right\")"
  },
  {
    "objectID": "slides-06.html#bad-ml-1",
    "href": "slides-06.html#bad-ml-1",
    "title": "Lecture 6: Column transformer and text features",
    "section": "❌ Bad ML 1",
    "text": "❌ Bad ML 1\n\nWhat’s wrong with the approach below?\n\n\nscaler = StandardScaler() # Creating a scalert object \nscaler.fit(X_train_toy) # Calling fit on the training data \ntrain_scaled = scaler.transform(\n    X_train_toy\n)  # Transforming the training data using the scaler fit on training data\n\nscaler = StandardScaler()  # Creating a separate object for scaling test data\nscaler.fit(X_test_toy)  # Calling fit on the test data\ntest_scaled = scaler.transform(\n    X_test_toy\n)  # Transforming the test data using the scaler fit on test data\n\nknn = KNeighborsClassifier()\nknn.fit(train_scaled, y_train_toy)\nprint(f\"Training score: {knn.score(train_scaled, y_train_toy):.2f}\")\nprint(f\"Test score: {knn.score(test_scaled, y_test_toy):.2f}\") # misleading scores\n\nTraining score: 0.63\nTest score: 0.60"
  },
  {
    "objectID": "slides-06.html#scaling-train-and-test-data-separately",
    "href": "slides-06.html#scaling-train-and-test-data-separately",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Scaling train and test data separately",
    "text": "Scaling train and test data separately"
  },
  {
    "objectID": "slides-06.html#bad-ml-2",
    "href": "slides-06.html#bad-ml-2",
    "title": "Lecture 6: Column transformer and text features",
    "section": "❌ Bad ML 2",
    "text": "❌ Bad ML 2\n\nWhat’s wrong with the approach below?\n\n\n# join the train and test sets back together\nXX = np.vstack((X_train_toy, X_test_toy))\n\nscaler = StandardScaler()\nscaler.fit(XX)\nXX_scaled = scaler.transform(XX)\n\nXX_train = XX_scaled[:X_train_toy.shape[0]]\nXX_test = XX_scaled[X_train_toy.shape[0]:]\n\nknn = KNeighborsClassifier()\nknn.fit(XX_train, y_train_toy)\nprint(f\"Training score: {knn.score(XX_train, y_train_toy):.2f}\")  # Misleading score\nprint(f\"Test score: {knn.score(XX_test, y_test_toy):.2f}\")  # Misleading score\n\nTraining score: 0.63\nTest score: 0.55"
  },
  {
    "objectID": "slides-06.html#bad-ml-3",
    "href": "slides-06.html#bad-ml-3",
    "title": "Lecture 6: Column transformer and text features",
    "section": "❌ Bad ML 3",
    "text": "❌ Bad ML 3\n\nWhat’s wrong with the approach below?\n\n\nknn = KNeighborsClassifier()\n\nscaler = StandardScaler()\nscaler.fit(X_train_toy)\nX_train_scaled = scaler.transform(X_train_toy)\nX_test_scaled = scaler.transform(X_test_toy)\ncross_val_score(knn, X_train_scaled, y_train_toy)\n\narray([0.25      , 0.5       , 0.58333333, 0.58333333, 0.41666667])\n\n\n\nSpeaker notes go here."
  },
  {
    "objectID": "slides-06.html#improper-preprocessing",
    "href": "slides-06.html#improper-preprocessing",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Improper preprocessing",
    "text": "Improper preprocessing"
  },
  {
    "objectID": "slides-06.html#proper-preprocessing",
    "href": "slides-06.html#proper-preprocessing",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Proper preprocessing",
    "text": "Proper preprocessing"
  },
  {
    "objectID": "slides-06.html#recap-sklearn-pipelines",
    "href": "slides-06.html#recap-sklearn-pipelines",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Recap: sklearn Pipelines",
    "text": "Recap: sklearn Pipelines\n\nPipeline is a way to chain multiple steps (e.g., preprocessing + model fitting) into a single workflow.\nSimplify the code and improves readability.\nReduce the risk of data leakage by ensuring proper transformation of the training and test sets.\nAutomatically apply transformations in sequence.\nExample:\n\nChaining a StandardScaler with a KNeighborsClassifier model.\n\n\n\nfrom sklearn.pipeline import make_pipeline\n\npipe_knn = make_pipeline(StandardScaler(), KNeighborsClassifier())\n\n# Correct way to do cross validation without breaking the golden rule. \ncross_val_score(pipe_knn, X_train_toy, y_train_toy) \n\narray([0.25      , 0.5       , 0.5       , 0.58333333, 0.41666667])"
  },
  {
    "objectID": "slides-06.html#group-work-class-demo-live-coding",
    "href": "slides-06.html#group-work-class-demo-live-coding",
    "title": "Lecture 6: Column transformer and text features",
    "section": "Group Work: Class Demo & Live Coding",
    "text": "Group Work: Class Demo & Live Coding\nFor this demo, each student should click this link to create a new repo in their accounts, then clone that repo locally to follow along with the demo from today.\n  \nIf you really don’t want to create a repo,\n\nNavigate to the cpsc330-2024W1 repo\nrun git pull to pull the latest files in the course repo\nLook for the demo file here: lectures/102-Firas-lectures/class_demos/."
  },
  {
    "objectID": "slides-06.html#sklearns-columntransformer",
    "href": "slides-06.html#sklearns-columntransformer",
    "title": "Lecture 6: Column transformer and text features",
    "section": "sklearn’s ColumnTransformer",
    "text": "sklearn’s ColumnTransformer\n\nUse ColumnTransformer to build all our transformations together into one object\n\n\n\nUse a column transformer with sklearn pipelines."
  },
  {
    "objectID": "slides-06.html#iclicker-exercise-6.1",
    "href": "slides-06.html#iclicker-exercise-6.1",
    "title": "Lecture 6: Column transformer and text features",
    "section": "(iClicker) Exercise 6.1",
    "text": "(iClicker) Exercise 6.1\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nYou could carry out cross-validation by passing a ColumnTransformer object to cross_validate.\n\n\nAfter applying column transformer, the order of the columns in the transformed data has to be the same as the order of the columns in the original data.\n\n\nAfter applying a column transformer, the transformed data is always going to be of different shape than the original data.\n\n\nWhen you call fit_transform on a ColumnTransformer object, you get a numpy ndarray.\n\n\n\niClicker 6.1\nA. False, column transfer to pipeline. There is no estimator attached to ColumnTransfer\nB. False, numeric, binary, ordinal, categorical etc…Can also use this to remove columns\nC. False, often it will be different, but not always\nD. True, just an ndarray, not a data frame"
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#announcements",
    "href": "slides-03-ml-fundamentals.html#announcements",
    "title": "Lecture 3: ML fundamentals",
    "section": "Announcements",
    "text": "Announcements\n\nHomework 2 (hw2) has been released (Due: Sept 16, 11:59pm)\n\nYou are welcome to broadly discuss it with your classmates but final answers and submissions must be your own.\nGroup submissions are not allowed for this assignment.\n\nAdvice on keeping up with the material\n\nPractice!\nMake sure you run the lecture notes on your laptop and experiment with the code.\nStart early on homework assignments.\n\nIf you are still on the waitlist, it’s your responsibility to keep up with the material and submit assignments.\nLast day to drop without a W standing: Sept 16, 2023"
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#recap",
    "href": "slides-03-ml-fundamentals.html#recap",
    "title": "Lecture 3: ML fundamentals",
    "section": "Recap",
    "text": "Recap\n\nImportance of generalization in supervised machine learning\nData splitting as a way to approximate generalization error\nTrain, test, validation, deployment data\nOverfitting, underfitting, the fundamental tradeoff, and the golden rule.\nCross-validation"
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#recap-1",
    "href": "slides-03-ml-fundamentals.html#recap-1",
    "title": "Lecture 3: ML fundamentals",
    "section": "Recap",
    "text": "Recap\nA typical sequence of steps to train supervised machine learning models\n\ntraining the model on the train split\ntuning hyperparamters using the validation split\nchecking the generalization performance on the test split"
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#iclicker-3.1",
    "href": "slides-03-ml-fundamentals.html#iclicker-3.1",
    "title": "Lecture 3: ML fundamentals",
    "section": "iClicker 3.1",
    "text": "iClicker 3.1\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nA decision tree model with no depth (the default max_depth in sklearn) is likely to perform very well on the deployment data.\n\n\nData splitting helps us assess how well our model would generalize.\n\n\nDeployment data is only scored once.\n\n\nValidation data could be used for hyperparameter optimization.\n\n\nIt’s recommended that data be shuffled before splitting it into train and test sets."
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#additional-resource",
    "href": "slides-03-ml-fundamentals.html#additional-resource",
    "title": "Lecture 3: ML fundamentals",
    "section": "Additional Resource",
    "text": "Additional Resource\n\n\n\n        \n        \n\n\nReference: MLU-Explain - Data Splitting"
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#iclicker-3.2",
    "href": "slides-03-ml-fundamentals.html#iclicker-3.2",
    "title": "Lecture 3: ML fundamentals",
    "section": "iClicker 3.2",
    "text": "iClicker 3.2\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\\(k\\)-fold cross-validation calls fit \\(k\\) times\nWe use cross-validation to get a more robust estimate of model performance.\nIf the mean train accuracy is much higher than the mean cross-validation accuracy it’s likely to be a case of overfitting.\nThe fundamental tradeoff of ML states that as training error goes down, validation error goes up.\nA decision stump on a complicated classification problem is likely to underfit."
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#additional-resource-1",
    "href": "slides-03-ml-fundamentals.html#additional-resource-1",
    "title": "Lecture 3: ML fundamentals",
    "section": "Additional Resource",
    "text": "Additional Resource\n\n\n\n        \n        \n\n\nReference: MLU-Explain - Cross Validation"
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#group-work-class-demo-live-coding",
    "href": "slides-03-ml-fundamentals.html#group-work-class-demo-live-coding",
    "title": "Lecture 3: ML fundamentals",
    "section": "Group Work: Class Demo & Live Coding",
    "text": "Group Work: Class Demo & Live Coding\nFor this demo, each student should click this link to create a new repo in their accounts, then clone that repo locally to follow along with the demo from today.\n  \nIf you really don’t want to create a repo,\n\nNavigate to the cpsc330-2024W1 repo\nrun git pull to pull the latest files in the course repo\nLook for the demo file here: lectures/102-Firas-lectures/class_demos/."
  },
  {
    "objectID": "slides-01-intro.html#introductions",
    "href": "slides-01-intro.html#introductions",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "🤝 Introductions ! 🤝",
    "text": "🤝 Introductions ! 🤝"
  },
  {
    "objectID": "slides-01-intro.html#about-your-instructor",
    "href": "slides-01-intro.html#about-your-instructor",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "About your instructor",
    "text": "About your instructor"
  },
  {
    "objectID": "slides-01-intro.html#about-my-research-interests",
    "href": "slides-01-intro.html#about-my-research-interests",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "About my research interests",
    "text": "About my research interests"
  },
  {
    "objectID": "slides-01-intro.html#group-work-in-this-class",
    "href": "slides-01-intro.html#group-work-in-this-class",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Group work in this class",
    "text": "Group work in this class\nThis term we will try to work in “Pods” of 3-5 …\nResearch shows that there is tremendous benefits in students working (and struggling) together!\nStudents ask better and more insightful questions, engage more deeply with the work, and it adds a social element to class.\nWe will try this in CPSC 330 this term!"
  },
  {
    "objectID": "slides-01-intro.html#group-work-in-this-class-1",
    "href": "slides-01-intro.html#group-work-in-this-class-1",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Group work in this class",
    "text": "Group work in this class\nUnderstandably, not everyone is a fan of group work - I understand that!\nSo you will never be forced to work in groups ​​If you would like to opt-out, move to the far left and far right sides of the room so we know you prefer to work individually.\nIf everyone moves to the side of the room, we will re-evaluate this approach 😂\nThere are no marks or points associated with these groups, and everyone should work on their own laptops as well"
  },
  {
    "objectID": "slides-01-intro.html#group-work-pods",
    "href": "slides-01-intro.html#group-work-pods",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Group work: Pods",
    "text": "Group work: Pods\nForm a Pod of 3-5 people sitting close to you.\nEach person should answer the following questions:\n\nPreferred Name,\nYear,\n(intended) Major\nWhy are you taking CPSC 330?\n\nThen, as a group, answer the following question:\nWhat is the most interesting (good or bad) example of Machine Learning in society?"
  },
  {
    "objectID": "slides-01-intro.html#meet-eva-a-fictitious-persona",
    "href": "slides-01-intro.html#meet-eva-a-fictitious-persona",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Meet Eva (a fictitious persona)!",
    "text": "Meet Eva (a fictitious persona)!\n\n\n\n\nEva is among one of you. She has some experience in Python programming. She knows machine learning as a buzz word. During her recent internship, she has developed some interest and curiosity in the field. She wants to learn what is it and how to use it. She is a curious person and usually has a lot of questions!"
  },
  {
    "objectID": "slides-01-intro.html#learning-outcomes",
    "href": "slides-01-intro.html#learning-outcomes",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Learning outcomes",
    "text": "Learning outcomes\nFrom this lecture, you will be able to\n\nExplain the motivation behind study machine learning.\nBriefly describe supervised learning.\nDifferentiate between traditional programming and machine learning.\nAssess whether a given problem is suitable for a machine learning solution.\nNavigate through the course material.\nBe familiar with the policies and how the class is going to run.\nBecome familiar with CPSC 330 and how the course works"
  },
  {
    "objectID": "slides-01-intro.html#about-this-course",
    "href": "slides-01-intro.html#about-this-course",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "About this course",
    "text": "About this course"
  },
  {
    "objectID": "slides-01-intro.html#qr-code-of-cpsc-330-website",
    "href": "slides-01-intro.html#qr-code-of-cpsc-330-website",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "QR code of CPSC 330 website",
    "text": "QR code of CPSC 330 website\n\nCourse Jupyter book: https://ubc-cs.github.io/cpsc330-2024W1\nCourse GitHub repository: https://github.com/UBC-CS/cpsc330-2024W1\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nCourse website: https://ubc-cs.github.io/cpsc330-2024W1 is the most important link.\nPlease read everything on there!\nYou can find the source code for everything we do here: https://ubc-cs.github.io/cpsc330-2024W1.\n\n\n\n\n\n\n\n\n\nImportant\n\n\nMake sure you go through the syllabus thoroughly and complete the syllabus quiz before Monday, Sept 19th at 11:59pm."
  },
  {
    "objectID": "slides-01-intro.html#asking-questions-during-class",
    "href": "slides-01-intro.html#asking-questions-during-class",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Asking questions during class",
    "text": "Asking questions during class\nYou are welcome to ask questions by raising your hand!\nIf you would prefer to write notes and ask questions later, you are more than welcome to do that also! Use Piazza."
  },
  {
    "objectID": "slides-01-intro.html#registration-waitlist-and-prerequisites",
    "href": "slides-01-intro.html#registration-waitlist-and-prerequisites",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Registration, waitlist and prerequisites",
    "text": "Registration, waitlist and prerequisites\n\n\n\n\n\n\nImportant\n\n\nPlease go through this document carefully before contacting your instructors about these issues. Even then, we are very unlikely to be able to help with registration, waitlist or prerequisite issues.\n\n\n\n\nIf you are on waitlist and if you’d like to try your chances, you should be able to access Canvas and Piazza.\n\nIf you’re unable to make it this time, there will be two sections of this course offered next semester and then again in the summer."
  },
  {
    "objectID": "slides-01-intro.html#lecture-format",
    "href": "slides-01-intro.html#lecture-format",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Lecture format",
    "text": "Lecture format\n\nIn person lectures T/Th.\nSometimes there will be videos to watch before lecture. You will find the list of pre-watch videos in the schedule on the course webpage.\nWe will also try to work on some questions and exercises together during the class.\nAll materials will be posted in this GitHub repository.\nWeekly tutorials will be office hour format run by the TAs and are completely optional.\n\nYou do not need to be registered in a tutorial.\nYou can attend whatever tutorials or office hours your want, regardless of in which/whether you’re registered."
  },
  {
    "objectID": "slides-01-intro.html#home-work-assignments",
    "href": "slides-01-intro.html#home-work-assignments",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Home work assignments",
    "text": "Home work assignments\n\nFirst homework assignment is due this coming Tuesday, September 10, midnight. This is a relatively straightforward assignment on Python. If you struggle with this assignment then that could be a sign that you will struggle later on in the course.\n\nYou must do the first two homework assignments on your own."
  },
  {
    "objectID": "slides-01-intro.html#exams",
    "href": "slides-01-intro.html#exams",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Exams",
    "text": "Exams\n\nWe’ll have two self-scheduled midterms and one final in Computer-based Testing Facility (CBTF)."
  },
  {
    "objectID": "slides-01-intro.html#course-calendar",
    "href": "slides-01-intro.html#course-calendar",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Course calendar",
    "text": "Course calendar\nHere is our course Calendar. Make sure you check it on a regular basis:\nhttps://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/calendar.html"
  },
  {
    "objectID": "slides-01-intro.html#course-structure",
    "href": "slides-01-intro.html#course-structure",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Course structure",
    "text": "Course structure\n\nIntroduction\n\nWeek 1\n\nPart I: ML fundamentals, preprocessing, midterm 1\n\nWeeks 2, 3, 4, 5, 6, 7, 8\n\nPart II: Unsupervised learning, transfer learning, common special cases, midterm 1\n\nWeeks 8, 9, 10, 11, 12\n\nPart III: Communication and ethics\n\nML skills are not beneficial if you can’t use them responsibly and communicate your results. In this module we’ll talk about these aspects.\nWeeks 13, 14"
  },
  {
    "objectID": "slides-01-intro.html#code-of-conduct",
    "href": "slides-01-intro.html#code-of-conduct",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Code of conduct",
    "text": "Code of conduct\n\nOur main forum for getting help will be Piazza.\n\n\n\n\n\n\n\nImportant\n\n\nPlease read this entire document about asking for help. TLDR: Be nice."
  },
  {
    "objectID": "slides-01-intro.html#homework-format-jupyter-lab-notebooks",
    "href": "slides-01-intro.html#homework-format-jupyter-lab-notebooks",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Homework format: Jupyter lab notebooks",
    "text": "Homework format: Jupyter lab notebooks\n\nOur notes are created in a Jupyter notebook, with file extension .ipynb.\nAlso, you will complete your homework assignments using Jupyter notebooks.\nConfusingly, “Jupyter notebook” is also the original application that opens .ipynb files - but has since been replaced by Jupyter lab.\n\nI am using Jupyter lab, some things might not work with the Jupyter notebook application.\nYou can also open these files in Visual Studio Code."
  },
  {
    "objectID": "slides-01-intro.html#jupyter-lab-notebooks",
    "href": "slides-01-intro.html#jupyter-lab-notebooks",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Jupyter lab notebooks",
    "text": "Jupyter lab notebooks\n\nNotebooks contain a mix of code, code output, markdown-formatted text (including LaTeX equations), and more.\nWhen you open a Jupyter notebook in one of these apps, the document is “live”, meaning you can run the code.\n\nFor example:\n\n1 + 1\n\n2\n\n\n\nx = [1, 2, 3]\nx[0] = 9999\nx\n\n[9999, 2, 3]"
  },
  {
    "objectID": "slides-01-intro.html#more-about-jupyter-lab",
    "href": "slides-01-intro.html#more-about-jupyter-lab",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "More about Jupyter lab",
    "text": "More about Jupyter lab\n\nBy default, Jupyter prints out the result of the last line of code, so you don’t need as many print statements.\nIn addition to the “live” notebooks, Jupyter notebooks can be statically rendered in the web browser, e.g. this.\n\nThis can be convenient for quick read-only access, without needing to launch the Jupyter notebook/lab application.\nBut you need to launch the app properly to interact with the notebooks."
  },
  {
    "objectID": "slides-01-intro.html#lecture-notes",
    "href": "slides-01-intro.html#lecture-notes",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Lecture notes",
    "text": "Lecture notes\n\nAll the lectures from last year are available here.\nWe cannot promise anything will stay the same from last year to this year, so read them in advance at your own risk.\nA “finalized” version will be pushed to GitHub and the Jupyter book right before each class.\nEach instructor will have slightly adapted versions of notes to present slides during lectures.\n\nYou will find the link to these slides in our repository: https://github.com/UBC-CS/cpsc330-2024W1/tree/main/lectures/103-Firas-lectures"
  },
  {
    "objectID": "slides-01-intro.html#grades",
    "href": "slides-01-intro.html#grades",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Grades",
    "text": "Grades\n\nThe grading breakdown is here.\nThe policy on challenging grades is here."
  },
  {
    "objectID": "slides-01-intro.html#setting-up-your-computer-for-the-course",
    "href": "slides-01-intro.html#setting-up-your-computer-for-the-course",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Setting up your computer for the course",
    "text": "Setting up your computer for the course"
  },
  {
    "objectID": "slides-01-intro.html#recommended-browser-and-tools",
    "href": "slides-01-intro.html#recommended-browser-and-tools",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Recommended browser and tools",
    "text": "Recommended browser and tools\n\nYou can install Chrome here.\nYou can install Firefox here.\n\nIn this course, we will primarily be using Python , git, GitHub, Canvas, Gradescope, Piazza, and PrairieLearn."
  },
  {
    "objectID": "slides-01-intro.html#course-conda-environment",
    "href": "slides-01-intro.html#course-conda-environment",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Course conda environment",
    "text": "Course conda environment\n\nFollow the setup instructions here to create a course conda environment on your computer.\nIf you do not have your computer with you, you can partner up with someone and set up your own computer later."
  },
  {
    "objectID": "slides-01-intro.html#python-requirementsresources",
    "href": "slides-01-intro.html#python-requirementsresources",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Python requirements/resources",
    "text": "Python requirements/resources\nWe will primarily use Python in this course.\nHere is the basic Python knowledge you’ll need for the course:\n\nBasic Python programming\nNumpy\nPandas\nBasic matplotlib\nSparse matrices\n\nHomework 1 is all about Python.\n\n\n\n\n\n\nNote\n\n\nWe do not have time to teach all the Python we need but you can find some useful Python resources here."
  },
  {
    "objectID": "slides-01-intro.html#cpsc-330-vs.-340",
    "href": "slides-01-intro.html#cpsc-330-vs.-340",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "CPSC 330 vs. 340",
    "text": "CPSC 330 vs. 340\nRead https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/330_vs_340.md which explains the difference between two courses.\nTLDR:\n\n340: how do ML models work?\n330: how do I use ML models?\nCPSC 340 has many prerequisites.\nCPSC 340 goes deeper but has a more narrow scope.\nI think CPSC 330 will be more useful if you just plan to apply basic ML."
  },
  {
    "objectID": "slides-01-intro.html#what-is-machine-learning-ml",
    "href": "slides-01-intro.html#what-is-machine-learning-ml",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "What is Machine Learning (ML)?",
    "text": "What is Machine Learning (ML)?"
  },
  {
    "objectID": "slides-01-intro.html#spam-prediction",
    "href": "slides-01-intro.html#spam-prediction",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Spam prediction",
    "text": "Spam prediction\n\nSuppose you are given some data with labeled spam and non-spam messages\n\n\nCodeOutput\n\n\n\nsms_df = pd.read_csv(DATA_DIR + \"spam.csv\", encoding=\"latin-1\")\nsms_df = sms_df.drop(columns = [\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"])\nsms_df = sms_df.rename(columns={\"v1\": \"target\", \"v2\": \"sms\"})\ntrain_df, test_df = train_test_split(sms_df, test_size=0.10, random_state=42)\n\n\n\n\n\n\n\n\n\ntarget\nsms\n\n\n\n\nspam\nLookAtMe!: Thanks for your purchase of a video clip from LookAtMe!, you've been charged 35p. Think you can do better? Why not send a video in a MMSto 32323.\n\n\nham\nAight, I'll hit you up when I get some cash\n\n\nham\nDon no da:)whats you plan?\n\n\nham\nGoing to take your babe out ?\n\n\nham\nNo need lar. Jus testing e phone card. Dunno network not gd i thk. Me waiting 4 my sis 2 finish bathing so i can bathe. Dun disturb u liao u cleaning ur room."
  },
  {
    "objectID": "slides-01-intro.html#traditional-programming-vs.-ml",
    "href": "slides-01-intro.html#traditional-programming-vs.-ml",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Traditional programming vs. ML",
    "text": "Traditional programming vs. ML\n\nImagine writing a Python program for spam identification, i.e., whether a text message or an email is spam or non-spam.\nTraditional programming\n\nCome up with rules using human understanding of spam messages.\nTime consuming and hard to come up with robust set of rules.\n\nMachine learning\n\nCollect large amount of data of spam and non-spam emails and let the machine learning algorithm figure out rules."
  },
  {
    "objectID": "slides-01-intro.html#lets-train-a-model",
    "href": "slides-01-intro.html#lets-train-a-model",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Let’s train a model",
    "text": "Let’s train a model\n\nThere are several packages that help us perform machine learning.\n\n\nX_train, y_train = train_df[\"sms\"], train_df[\"target\"]\nX_test, y_test = test_df[\"sms\"], test_df[\"target\"]\nclf = make_pipeline(CountVectorizer(max_features=5000), LogisticRegression(max_iter=5000))\nclf.fit(X_train, y_train); # Training the model"
  },
  {
    "objectID": "slides-01-intro.html#unseen-messages",
    "href": "slides-01-intro.html#unseen-messages",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Unseen messages",
    "text": "Unseen messages\n\nNow use the trained model to predict targets of unseen messages:\n\n\n\n\n\n\n\n\n\n\nsms\n\n\n\n\n3245\nFunny fact Nobody teaches volcanoes 2 erupt, tsunamis 2 arise, hurricanes 2 sway aroundn no 1 teaches hw 2 choose a wife Natural disasters just happens\n\n\n944\nI sent my scores to sophas and i had to do secondary application for a few schools. I think if you are thinking of applying, do a research on cost also. Contact joke ogunrinde, her school is one m...\n\n\n1044\nWe know someone who you know that fancies you. Call 09058097218 to find out who. POBox 6, LS15HB 150p\n\n\n2484\nOnly if you promise your getting out as SOON as you can. And you'll text me in the morning to let me know you made it in ok."
  },
  {
    "objectID": "slides-01-intro.html#predicting-on-unseen-data",
    "href": "slides-01-intro.html#predicting-on-unseen-data",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Predicting on unseen data",
    "text": "Predicting on unseen data\nThe model is accurately predicting labels for the unseen text messages above!\n\n\n\n\n\n\n\n \nsms\nspam_predictions\n\n\n\n\n3245\nFunny fact Nobody teaches volcanoes 2 erupt, tsunamis 2 arise, hurricanes 2 sway aroundn no 1 teaches hw 2 choose a wife Natural disasters just happens\nham\n\n\n944\nI sent my scores to sophas and i had to do secondary application for a few schools. I think if you are thinking of applying, do a research on cost also. Contact joke ogunrinde, her school is one me the less expensive ones\nham\n\n\n1044\nWe know someone who you know that fancies you. Call 09058097218 to find out who. POBox 6, LS15HB 150p\nspam\n\n\n2484\nOnly if you promise your getting out as SOON as you can. And you'll text me in the morning to let me know you made it in ok.\nham"
  },
  {
    "objectID": "slides-01-intro.html#a-different-way-to-solve-problems",
    "href": "slides-01-intro.html#a-different-way-to-solve-problems",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "A different way to solve problems",
    "text": "A different way to solve problems\nMachine learning uses computer programs to model data. It can be used to extract hidden patterns, make predictions in new situation, or generate novel content.\n\nA field of study that gives computers the ability to learn without being explicitly programmed.  – Arthur Samuel (1959)"
  },
  {
    "objectID": "slides-01-intro.html#ml-vs.-traditional-programming",
    "href": "slides-01-intro.html#ml-vs.-traditional-programming",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "ML vs. traditional programming",
    "text": "ML vs. traditional programming\n\nWith machine learning, you’re likely to\n\nSave time\nCustomize and scale products"
  },
  {
    "objectID": "slides-01-intro.html#prevalence-of-ml",
    "href": "slides-01-intro.html#prevalence-of-ml",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Prevalence of ML",
    "text": "Prevalence of ML\nLet’s look at some examples."
  },
  {
    "objectID": "slides-01-intro.html#activity-for-what-type-of-problems-ml-is-appropriate-5-mins",
    "href": "slides-01-intro.html#activity-for-what-type-of-problems-ml-is-appropriate-5-mins",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Activity: For what type of problems ML is appropriate? (~5 mins)",
    "text": "Activity: For what type of problems ML is appropriate? (~5 mins)\nDiscuss with your neighbour for which of the following problems you would use machine learning\n\nFinding a list of prime numbers up to a limit\nGiven an image, automatically identifying and labeling objects in the image\nFinding the distance between two nodes in a graph"
  },
  {
    "objectID": "slides-01-intro.html#types-of-machine-learning",
    "href": "slides-01-intro.html#types-of-machine-learning",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Types of machine learning",
    "text": "Types of machine learning\nHere are some typical learning problems.\n\nSupervised learning (Gmail spam filtering)\n\nTraining a model from input data and its corresponding targets to predict targets for new examples.\n\n\nUnsupervised learning (Google News)\n\nTraining a model to find patterns in a dataset, typically an unlabeled dataset.\n\nReinforcement learning (AlphaGo)\n\nA family of algorithms for finding suitable actions to take in a given situation in order to maximize a reward.\n\nRecommendation systems (Amazon item recommendation system)\n\nPredict the “rating” or “preference” a user would give to an item."
  },
  {
    "objectID": "slides-01-intro.html#what-is-supervised-learning",
    "href": "slides-01-intro.html#what-is-supervised-learning",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "What is supervised learning?",
    "text": "What is supervised learning?\n\nTraining data comprises a set of observations (\\(X\\)) and their corresponding targets (\\(y\\)).\nWe wish to find a model function \\(f\\) that relates \\(X\\) to \\(y\\).\nWe use the model function to predict targets of new examples."
  },
  {
    "objectID": "slides-01-intro.html#evas-questions",
    "href": "slides-01-intro.html#evas-questions",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "🤔 Eva’s questions",
    "text": "🤔 Eva’s questions\n\n\nAt this point, Eva is wondering about many questions.\n\nHow are we exactly “learning” whether a message is spam and ham?\nAre we expected to get correct predictions for all possible messages? How does it predict the label for a message it has not seen before?\n\nWhat if the model mis-labels an unseen example? For instance, what if the model incorrectly predicts a non-spam as a spam? What would be the consequences?\nHow do we measure the success or failure of spam identification?\nIf you want to use this model in the wild, how do you know how reliable it is?\n\nWould it be useful to know how confident the model is about the predictions rather than just a yes or a no?\n\nIt’s great to think about these questions right now. But Eva has to be patient. By the end of this course you’ll know answers to many of these questions!"
  }
]