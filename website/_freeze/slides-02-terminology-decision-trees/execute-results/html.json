{
  "hash": "2b16f90336c2b89171f1787f77efe745",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Lecture 2: Terminology, Baselines, Decision Trees'\ndescription: Terminology, decision Trees\nauthor: \"Firas Moosvi (Slides adapted from Varada Kolhatkar)\"\ndescription-short: 'Supervised machine learning terminology: Features, target, examples, training, parameters and hyperparameters, Decision boundary, classification vs. regression, inference vs. prediction, accuracy vs. error, baselines, intuition of decision trees'\nformat:\n  revealjs:\n    slide-number: true\n    smaller: true\n    center: true\n    logo: img/UBC-CS-logo.png\n    resources:\n      - data/\n      - img/\n---\n\n\n\n## Announcements \n\n- Things due this week \n    - Homework 1 (hw1): Due May 16 17:59\n<!-- - Homework 2 (hw2) has been released (Due: Sept 16, 11:59pm)\n    - There is some autograding in this homework.\n-->\n- You can find the tentative due dates for all deliverables [here](https://ubc-cs.github.io/cpsc330-2025S1/README.html#deliverable-due-dates-tentative).\n- Please monitor Piazza (especially pinned posts and instructor posts) for announcements. \n- I'll assume that you've watched the pre-lecture videos.\n\n<br><br>\n\n## Surveys\n\n- Please complete the \"Getting to know you\" survey on [Canvas]().\n- Also, please complete the anonymous restaurant survey on Qualtrics [here](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw).\n  - We will try to analyze this data set in the coming weeks.\n\n## Gradescope\n\nMake sure you can submit your assignment before the hw1 due date!\n\nIt is not **required** for you to work in a GitHub repository, but we *highly encourage you to do this*!\n\n**For students on the waitlist**: Gradescope Entry code is **MRZX7Z**.\n\n![](img/gradescope){.nostretch fig-align=\"center\" width=\"700px\"}\n\n\n## Checklist for you in the first week\n\n- [ ] Are you able to access course [Canvas](https://canvas.ubc.ca/courses/149122) shell? \n- [ ] Are you able to access [course Piazza](https://piazza.com/ubc.ca/winterterm12024/cpsc_v3301011021032024S1)?\n- [ ] Are you able to access [Gradescope](https://canvas.ubc.ca/courses/149122/external_tools/53542?display=borderless)? (If not, refer to the [Gradescope Student Guide](https://lthub.ubc.ca/guides/gradescope-student-guide/).)\n- [ ] Are you able to access [iClicker Cloud](https://join.iclicker.com/VYFJ) for this course?\n- [ ] Did you follow the setup instructions [here](https://ubc-cs.github.io/cpsc330-2025S1/docs/setup.html) to create a course conda environment on your computer?\n- [ ] Did you complete the \"Getting to know you\" survey on Canvas?\n- [ ] Did you complete the anonymous [restaurant survey on Qualtrics](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw)?\n- [ ] Are you almost finished or at least started with homework 1?\n\n## Suggested Workflow for working with Jupyter Notebooks\n\n- Create a folder on your computer that will have all the CPSC 330 repos:\n  - `~/School/Year3/CPSC330/` <-- Consider this your CPSC parent folder\n- Create subfolders for: `hw`, `class`, `practice`\n- In the `hw` folder, you will then clone `hw1`, `hw2`, `hw3`, etc...\n- In the `class` folder, you will clone the `cpsc330-2025S1` repo which contains all the class jupyter notebooks\n  - Do **not** make any changes to files in this directory/repo, you will have trouble when you pull stuff during each class.\n  - If you did make changes, you can reset to the last commit and DESTROY any changes you made (be careful with this command) using: `git reset --hard`\n- In the `practice` folder, you can **copy** any notebooks (`.ipynb`) and files (like data/*.csv) you want to try running locally and experiment\n\n## Recap: Machine learning workflow \n\nSupervised machine learning is quite flexible; it can be used on a variety of problems and different kinds of data. Here is a typical workflow of a supervised machine learning systems.  \n\n![](img/ml-workflow.png){.nostretch fig-align=\"center\" width=\"700px\"}\n\n<!-- <img src=\"img/ml-workflow.png\" height=\"800\" width=\"800\">  -->\n\nWe will build machine learning pipelines in this course, focusing on some of the steps above. \n\n## Recap: What is ML? \n\n- ML uses data to build models that find patterns, make predictions, or generate content.\n- It helps computers learn from data to make decisions.\n- No one model works for every situation.\n\n## Recap: Supervised learning\n\n- We wish to find a model function $f$ that relates $X$ to $y$.\n- We use the model function to predict targets of new examples. \n\n![](img/sup-learning.png){.nostretch fig-align=\"center\" width=\"700px\"}\n\nIn the first part of this course, we'll focus on supervised machine learning.\n\n## iClicker 2.1: Terminology\n\niClicker cloud join link: [https://join.iclicker.com/VYFJ](https://join.iclicker.com/VYFJ)\n\n## Select all of the following statements which are **True** (iClicker)\n\nA) Predicting spam is an example of machine learning. \nB) Predicting housing prices is not an example of machine learning. \nC) For problems such as spelling correction, translation, face recognition, spam identification, if you are a domain expert, it's usually faster and scalable to come up with a robust set of rules manually rather than building a machine learning model. \nD) If you are asked to write a program to find all prime numbers up to  a limit, it is better to implement one of the algorithms for doing so rather than using machine learning. \nE) Google News is likely be using machine learning to organize news. \n<br><br><br><br>\n\n## iClicker 2.2: Supervised vs unsupervised\n\nClicker cloud join link: [https://join.iclicker.com/VYFJ](https://join.iclicker.com/VYFJ)\n\nSelect all of the following statements which are examples of supervised machine learning\n\n- (A) Finding groups of similar properties in a real estate data set.\n- (B) Predicting whether someone will have a heart attack or not on the basis of demographic, diet, and clinical measurement.\n- (C) Grouping articles on different topics from different news sources (something like the Google News app).\n- (D) Detecting credit card fraud based on examples of fraudulent and non-fraudulent transactions.\n- (E) Given some measure of employee performance, identify the key factors which are likely to influence their performance.\n\n## iClicker 2.3: Classification vs. Regression\n\nClicker cloud join link: [https://join.iclicker.com/VYFJ](https://join.iclicker.com/VYFJ)\n \nSelect all of the following statements which are examples of regression problems\n\n- (A) Predicting the price of a house based on features such as number of bedrooms and the year built.\n- (B) Predicting if a house will sell or not based on features like the price of the house, number of rooms, etc.\n- (C) Predicting percentage grade in CPSC 330 based on past grades.\n- (D) Predicting whether you should bicycle tomorrow or not based on the weather forecast.\n- (E) Predicting appropriate thermostat temperature based on the wind speed and the number of people in a room.\n\n\n## ML Framework in CPSC 330\n\n- There are many frameworks to do do machine learning. \n- We'll mainly be using [`scikit-learn` framework](https://scikit-learn.org/stable/). \n\n::: {#7b3de29f .cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n\n        <iframe\n            width=\"1000\"\n            height=\"650\"\n            src=\"https://scikit-learn.org\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Running example \n\nImagine youâ€™re in the fortunate situation where, after graduating, you have a few job offers and need to decide which one to choose. You want to pick the job that will likely make you the happiest. To help with your decision, you collect data from like-minded people. Here are the first few rows of this toy dataset.\n\n::: {#2ee0f6bb .cell execution_count=3}\n``` {.python .cell-code}\ntoy_happiness_df = pd.read_csv(DATA_DIR + 'toy_job_happiness.csv')\ntoy_happiness_df\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>supportive_colleagues</th>\n      <th>salary</th>\n      <th>free_coffee</th>\n      <th>boss_vegan</th>\n      <th>happy?</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>70000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Unhappy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>60000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Unhappy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>80000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>110000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>120000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Unhappy</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Terminology\n\n## Features, target, example\n- What are the **features** $X$? \n  - features = inputs = predictors = explanatory variables = regressors = independent variables = covariates \n- What's the target $y$?\n  - target = output = outcome = response variable = dependent variable = labels \n- Can you think of other relevant features for this problem? \n- What is an example?\n\n## Classification vs. Regression\n- Is this a **classification** problem or a **regression** problem?  \n\n::: {#9606ba35 .cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>supportive_colleagues</th>\n      <th>salary</th>\n      <th>free_coffee</th>\n      <th>boss_vegan</th>\n      <th>happy?</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>70000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Unhappy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>60000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Unhappy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>80000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>110000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>120000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Unhappy</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Prediction vs. Inference\n- **Inference** is using the model to understand the relationship between the features and the target \n  - Why certain factors influence happiness? \n- **Prediction** is using the model to predict the target value for new examples based on learned patterns.\n- Of course these goals are related, and in many situations we need both. \n\n## Training \n- In supervised ML, the goal is to learn a function that maps input features ($X$) to a target ($y$).\n- The relationship between $X$ and $y$ is often complex, making it difficult to  define mathematically.\n- We use algorithms to approximate this complex relationship between $X$ and $y$.\n- **Training** is the process of applying an algorithm to learn the best function (or model) that maps $X$ to $y$. \n- In this course, I'll help you develop an intuition for how these models work and demonstrate how to use them in a machine learning pipeline.\n\n## Separating $X$ and $y$\n\n- In order to train a model we need to separate $X$ and $y$ from the dataframe. \n\n::: {#0599fa66 .cell execution_count=5}\n``` {.python .cell-code}\nX = toy_happiness_df.drop(columns=[\"happy?\"]) # Extract the feature set by removing the target column \"happy?\"\ny = toy_happiness_df[\"happy?\"] # Extract the target variable \"happy?\"\n```\n:::\n\n\n## Baseline\n- Let's try a simplest algorithm of predicting the most popular target! \n\n::: {#0fb2397b .cell execution_count=6}\n``` {.python .cell-code}\nfrom sklearn.dummy import DummyClassifier\n# Initialize the DummyClassifier to always predict the most frequent class\nmodel = DummyClassifier(strategy=\"most_frequent\")\n# Train the model on the feature set X and target variable y\nmodel.fit(X, y)\n# Add the predicted values as a new column in the dataframe\ntoy_happiness_df['dummy_predictions'] = model.predict(X)\n# Show the dataframe\ntoy_happiness_df\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>supportive_colleagues</th>\n      <th>salary</th>\n      <th>free_coffee</th>\n      <th>boss_vegan</th>\n      <th>happy?</th>\n      <th>dummy_predictions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>70000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Unhappy</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>60000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Unhappy</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>80000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Happy</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>110000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Happy</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>120000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Happy</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Happy</td>\n      <td>Happy</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Unhappy</td>\n      <td>Happy</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Decision trees\n\n## Pre-Intuition\n\nLet's play [20 questions](https://en.wikipedia.org/wiki/Twenty_questions)!\nYou can ask me up to 20 Yes/No questions to figure out the answer.\n<br>\n<br>\n\n### I'm thinking of a person - who is it ?\n\n## Intuition\n- Decision trees find the \"best\" way to split data to make predictions.\n- Each split is based on a question, like 'Are the colleagues supportive?'\n- The goal is to group data by similar outcomes at each step.\n- Now, let's see a decision tree using sklearn.\n\n## Decision tree with `sklearn`\nLet's train a simple decision tree on our toy dataset.  \n\n::: {#91d1e878 .cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.tree import DecisionTreeClassifier # import the classifier\nfrom sklearn.tree import plot_tree\n\nmodel = DecisionTreeClassifier(max_depth=2, random_state=1) # Create a class object\nmodel.fit(X, y)\nplot_tree(model, filled=True, feature_names = X.columns, class_names=[\"Happy\", \"Unhappy\"], \n          impurity = False, fontsize=12);\n```\n\n::: {.cell-output .cell-output-display}\n![](slides-02-terminology-decision-trees_files/figure-revealjs/cell-8-output-1.png){width=763 height=389}\n:::\n:::\n\n\n## Prediction \n- Given a new example, how does a decision tree predict the class of this example?  \n- What would be the prediction for the example below using the tree above? \n  - supportive_colleagues = 1, salary = 60000, coffee_machine = 0, vegan_boss = 1,  \n\n::: {#fb210d3a .cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![](slides-02-terminology-decision-trees_files/figure-revealjs/cell-9-output-1.png){width=763 height=389}\n:::\n:::\n\n\n## Prediction with `sklearn`\n- What would be the prediction for the example below using the tree above? \n  - supportive_colleagues = 1, salary = 60000, coffee_machine = 0, vegan_boss = 1,  \n\n::: {#29173317 .cell execution_count=9}\n``` {.python .cell-code}\ntest_example = [[1, 60000, 0, 1]]\nprint(\"Model prediction: \", model.predict(test_example))\nplot_tree(model, filled=True, feature_names = X.columns, class_names = [\"Happy\", \"Unhappy\"], impurity = False, fontsize=9);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel prediction:  ['Unhappy']\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides-02-terminology-decision-trees_files/figure-revealjs/cell-10-output-2.png){width=763 height=389}\n:::\n:::\n\n\n## Training (high level)\n\n- How many possible questions could we ask in this context?\n\n::: {#8f0d5043 .cell execution_count=10}\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>supportive_colleagues</th>\n      <th>salary</th>\n      <th>free_coffee</th>\n      <th>boss_vegan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>70000</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>60000</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>80000</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>110000</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>120000</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>150000</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Training (high level)\n- Decision tree learning is a search process to find the \"best\" tree among many possible ones.\n- We evaluate questions using measures like **information gain** or the **Gini index** to find the most effective split.\n- At each step, we aim to split the data into groups with more certainty in their outcomes.\n\n## Parameters vs. Hyperparameters \n- Parameters \n  - The questions (features and thresholds) used to split the data at each node.\n  - Example: salary <= 75000 at the root node  \n- Hyperparameters\n  - Settings that control tree growth, like `max_depth`, which limits how deep the tree can go.\n\n## Decision boundary with `max_depth=1`\n\n::: {#d4a3edc5 .cell execution_count=11}\n\n::: {.cell-output .cell-output-display}\n![](slides-02-terminology-decision-trees_files/figure-revealjs/cell-12-output-1.png){width=1236 height=517}\n:::\n:::\n\n\n## Decision boundary with `max_depth=2`\n\n::: {#f32fc75d .cell execution_count=12}\n\n::: {.cell-output .cell-output-display}\n![](slides-02-terminology-decision-trees_files/figure-revealjs/cell-13-output-1.png){width=1236 height=517}\n:::\n:::\n\n\n## iClicker 2.5: Baselines and Decision trees\n\niClicker cloud join link: [https://join.iclicker.com/VYFJ](https://join.iclicker.com/VYFJ)\n\nSelect all of the following statements which are TRUE.\n\n- (A) Change in features (i.e., binarizing features above) would change DummyClassifier predictions.\n- (B) predict takes only X as argument whereas fit and score take both X and y as arguments.\n- (C) For the decision tree algorithm to work, the feature values must be binary.\n- (D) The prediction in a decision tree works by routing the example from the root to the leaf.\n\n",
    "supporting": [
      "slides-02-terminology-decision-trees_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}