{
  "hash": "cb31cf6b40d1c789c5e45cc533947c00",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Lecture 1: Introduction to CPSC 330 (continued)'\ndescription: Introduction to ML and CPSC 330\ndescription-short: 'What is machine learning, types of machine learning, learning to navigate through the course materials, getting familiar with the course policies'\nformat:\n  revealjs:\n    slide-number: true\n    smaller: true\n    center: true\n    logo: img/UBC-CS-logo.png\n    resources:\n      - data/\n      - img/\n---\n\n\n\n## Example: Predicting labels of a given image \n\n- We can also use machine learning to predict labels of given images using a technique called **transfer learning**. \n\n::: {.scroll-container style=\"overflow-y: scroll; height: 400px;\"}\n\n::: {#adfecfcd .cell execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](slides-01-contd_files/figure-revealjs/cell-3-output-1.png){width=578 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                         Class  Probability score\n                     tiger cat              0.636\n              tabby, tabby cat              0.174\nPembroke, Pembroke Welsh corgi              0.081\n               lynx, catamount              0.011\n--------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides-01-contd_files/figure-revealjs/cell-3-output-3.png){width=354 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                     Class  Probability score\n         cheetah, chetah, Acinonyx jubatus              0.994\n                  leopard, Panthera pardus              0.005\njaguar, panther, Panthera onca, Felis onca              0.001\n       snow leopard, ounce, Panthera uncia              0.000\n--------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides-01-contd_files/figure-revealjs/cell-3-output-5.png){width=329 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                   Class  Probability score\n                                 macaque              0.885\npatas, hussar monkey, Erythrocebus patas              0.062\n      proboscis monkey, Nasalis larvatus              0.015\n                       titi, titi monkey              0.010\n--------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides-01-contd_files/figure-revealjs/cell-3-output-7.png){width=315 height=427}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                        Class  Probability score\nWalker hound, Walker foxhound              0.582\n             English foxhound              0.144\n                       beagle              0.068\n                  EntleBucher              0.059\n--------------------------------------------------------------\n```\n:::\n:::\n\n\n:::\n\n## Example: Predicting housing prices\n\nSuppose we want to predict housing prices given a number of attributes associated with houses. The target here is **continuous** and not **discrete**. \n\n::: {#2649d84e .cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>target</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>509000.0</td>\n      <td>2</td>\n      <td>1.50</td>\n      <td>1930</td>\n      <td>3521</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1930</td>\n      <td>0</td>\n      <td>1989</td>\n      <td>0</td>\n      <td>98007</td>\n      <td>47.6092</td>\n      <td>-122.146</td>\n      <td>1840</td>\n      <td>3576</td>\n    </tr>\n    <tr>\n      <td>675000.0</td>\n      <td>5</td>\n      <td>2.75</td>\n      <td>2570</td>\n      <td>12906</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>2570</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98075</td>\n      <td>47.5814</td>\n      <td>-122.050</td>\n      <td>2580</td>\n      <td>12927</td>\n    </tr>\n    <tr>\n      <td>420000.0</td>\n      <td>3</td>\n      <td>1.00</td>\n      <td>1150</td>\n      <td>5120</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>6</td>\n      <td>800</td>\n      <td>350</td>\n      <td>1946</td>\n      <td>0</td>\n      <td>98116</td>\n      <td>47.5588</td>\n      <td>-122.392</td>\n      <td>1220</td>\n      <td>5120</td>\n    </tr>\n    <tr>\n      <td>680000.0</td>\n      <td>8</td>\n      <td>2.75</td>\n      <td>2530</td>\n      <td>4800</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1390</td>\n      <td>1140</td>\n      <td>1901</td>\n      <td>0</td>\n      <td>98112</td>\n      <td>47.6241</td>\n      <td>-122.305</td>\n      <td>1540</td>\n      <td>4800</td>\n    </tr>\n    <tr>\n      <td>357823.0</td>\n      <td>3</td>\n      <td>1.50</td>\n      <td>1240</td>\n      <td>9196</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1240</td>\n      <td>0</td>\n      <td>1968</td>\n      <td>0</td>\n      <td>98072</td>\n      <td>47.7562</td>\n      <td>-122.094</td>\n      <td>1690</td>\n      <td>10800</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Example: Building a regression model\n\n::: {#2a2d2eda .cell execution_count=4}\n``` {.python .cell-code}\nfrom lightgbm.sklearn import LGBMRegressor\n\nX_train, y_train = train_df.drop(columns= [\"target\"]), train_df[\"target\"]\nX_test, y_test = test_df.drop(columns= [\"target\"]), train_df[\"target\"]\n\nmodel = LGBMRegressor()\nmodel.fit(X_train, y_train);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000761 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 2333\n[LightGBM] [Info] Number of data points in the train set: 17290, number of used features: 18\n[LightGBM] [Info] Start training from score 539762.702545\n```\n:::\n:::\n\n\n## Example: Predicting prices of unseen houses\n\n::: {#1a55d0cb .cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Predicted_target</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>345831.740542</td>\n      <td>4</td>\n      <td>2.25</td>\n      <td>2130</td>\n      <td>8078</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1380</td>\n      <td>750</td>\n      <td>1977</td>\n      <td>0</td>\n      <td>98055</td>\n      <td>47.4482</td>\n      <td>-122.209</td>\n      <td>2300</td>\n      <td>8112</td>\n    </tr>\n    <tr>\n      <td>601042.018745</td>\n      <td>3</td>\n      <td>2.50</td>\n      <td>2210</td>\n      <td>7620</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>2210</td>\n      <td>0</td>\n      <td>1994</td>\n      <td>0</td>\n      <td>98052</td>\n      <td>47.6938</td>\n      <td>-122.130</td>\n      <td>1920</td>\n      <td>7440</td>\n    </tr>\n    <tr>\n      <td>311310.186024</td>\n      <td>4</td>\n      <td>1.50</td>\n      <td>1800</td>\n      <td>9576</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1800</td>\n      <td>0</td>\n      <td>1977</td>\n      <td>0</td>\n      <td>98045</td>\n      <td>47.4664</td>\n      <td>-121.747</td>\n      <td>1370</td>\n      <td>9576</td>\n    </tr>\n    <tr>\n      <td>597555.592401</td>\n      <td>3</td>\n      <td>2.50</td>\n      <td>1580</td>\n      <td>1321</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1080</td>\n      <td>500</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>98107</td>\n      <td>47.6688</td>\n      <td>-122.402</td>\n      <td>1530</td>\n      <td>1357</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nWe are predicting continuous values here as apposed to discrete values in `spam` vs. `ham` example. \n\n## Machine learning workflow \n\nSupervised machine learning is quite flexible; it can be used on a variety of problems and different kinds of data. Here is a typical workflow of a supervised machine learning systems.  \n\n![](img/ml-workflow.png){.nostretch fig-align=\"center\" width=\"700px\"}\n\n<!-- <img src=\"img/ml-workflow.png\" height=\"800\" width=\"800\">  -->\n\nWe will build machine learning pipelines in this course, focusing on some of the steps above. \n\n<br><br>\n\n## ❓❓ Questions for you\n\niClicker cloud join link: https://join.iclicker.com/VYFJ\n\n## Select all of the following statements which are **True** (iClicker)\n\nA) Predicting spam is an example of machine learning. \nB) Predicting housing prices is not an example of machine learning. \nC) For problems such as spelling correction, translation, face recognition, spam identification, if you are a domain expert, it's usually faster and scalable to come up with a robust set of rules manually rather than building a machine learning model. \nD) If you are asked to write a program to find all prime numbers up to  a limit, it is better to implement one of the algorithms for doing so rather than using machine learning. \nE) Google News is likely be using machine learning to organize news. \n<br><br><br><br>\n\n## Surveys\n\n- Please complete the \"Getting to know you\" survey on [Canvas]().\n- Also, please complete the anonymous restaurant survey on Qualtrics [here](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw).\n  - We will try to analyze this data set in the coming weeks. \n\n## Checklist for you before the next class\n\n- [ ] Are you able to access course [Canvas](https://canvas.ubc.ca/courses/149122) shell? \n- [ ] Are you able to access [course Piazza](https://piazza.com/ubc.ca/winterterm12024/cpsc_v3301011021032024w1)?\n- [ ] Are you able to access [Gradescope](https://canvas.ubc.ca/courses/149122/external_tools/53542?display=borderless)? (If not, refer to the [Gradescope Student Guide](https://lthub.ubc.ca/guides/gradescope-student-guide/).)\n- [ ] Are you able to access [iClicker Cloud](https://join.iclicker.com/VYFJ) for this course?\n- [ ] Did you follow the setup instructions [here](https://ubc-cs.github.io/cpsc330-2024W1/docs/setup.html) to create a course conda environment on your computer?\n- [ ] Did you complete the \"Getting to know you\" survey on Canvas?\n- [ ] Did you complete the anonymous [restaurant survey on Qualtrics](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw)?\n- [ ] Are you almost finished or at least started with homework 1?\n\n",
    "supporting": [
      "slides-01-contd_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}