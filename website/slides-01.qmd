---
title: 'Lecture 1: Introduction to CPSC 330'
author: "Firas Moosvi (Slides adapted from Varada Kolhatkar)"
description: Introduction to ML and CPSC 330
description-short: 'What is machine learning, types of machine learning, learning to navigate through the course materials, getting familiar with the course policies'
format:
  revealjs:
    slide-number: true
    smaller: true
    center: true
    logo: img/UBC-CS-logo.png
    resources:
      - data/
      - img/
---

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import sys
sys.path.append(os.path.join(os.path.abspath("."), "code"))
from IPython.display import HTML, display
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline

plt.rcParams["font.size"] = 16
pd.set_option("display.max_colwidth", 200)

DATA_DIR = 'data/' 
```

## ü§ù Introductions ! ü§ù {.middle}

## About your instructor {background="#43464B"}

<img src="img/firas/firas_intro.png" width="800">

## About my research interests {background="#43464B"}

<img src="img/firas/interests.png" width="800">

## Group work in this class

This term we will try to work in "Pods" of 3-5 ... 

Research shows that there is tremendous benefits in students working (and struggling) together!

Students ask better and more insightful questions, engage more deeply with the work, and it adds a social element to class.

We will try this in CPSC 330 this term!

## Group work in this class

Understandably, not everyone is a fan of group work - I understand that!

So you will never be forced to work in groups
‚Äã‚ÄãIf you would like to opt-out, move to the far left and far right sides of the room so we know you prefer to work individually.

If everyone moves to the side of the room, we will re-evaluate this approach üòÇ

There are no marks or points associated with these groups, and everyone should work on their own laptops as well

## Group work: Pods

**Form a Pod of 3-5 people sitting close to you.**

Each person should answer the following questions:

- Preferred Name, 
- Year, 
- (intended) Major
- Why are you taking CPSC 330?

Then, as a group, answer the following question:

**What is the most interesting (good or bad) example of Machine Learning in society?**

## Meet Eva (a fictitious persona)!

:::: {.columns}

::: {.column width="40%"}
![](img/eva-hi.png)
:::

::: {.column width="60%"}
Eva is among one of you. She has some experience in Python programming. She knows machine learning as a buzz word. During her recent internship, she has developed some interest and curiosity in the field. She wants to learn what is it and how to use it. She is a curious person and usually has a lot of questions!  
:::

::::

<!-- 
## You all

- Introduce yourself to your neighbour. 
- Since we're going to spend the semester with each other, I would like to know you a bit better. 
- Please fill out [Getting to know you survey](https://canvas.ubc.ca/courses/149122/quizzes) when you get a chance. 
-->

## Learning outcomes 
From this lecture, you will be able to 

- Explain the motivation behind study machine learning. 
- Briefly describe supervised learning.
- Differentiate between traditional programming and machine learning.
- Assess whether a given problem is suitable for a machine learning solution.
- Navigate through the course material. 
- Be familiar with the policies and how the class is going to run.
- Become familiar with CPSC 330 and how the course works

## About this course

## CPSC 330 website

- Course Jupyter book: https://ubc-cs.github.io/cpsc330-2025S1
- Course GitHub repository: https://github.com/UBC-CS/cpsc330-2025S1

::: {.callout-important}
Course website: [https://ubc-cs.github.io/cpsc330-2025S1](https://ubc-cs.github.io/cpsc330-2025S1) is the most important link. You can access the course website from Canvas.

![](img/canvas.png)

Please read everything on there!

You can find the source code for everything we do here: https://ubc-cs.github.io/cpsc330-2025S1.
:::

::: {.callout-important}
Make sure you go through the syllabus thoroughly and complete the syllabus quiz before Friday's class! 
:::

## Asking questions during class

You are welcome to ask questions by raising your hand!

If you would prefer to write notes and ask questions later, you are more than welcome to do that also! Use Piazza.

## Registration, waitlist and prerequisites

::: {.callout-important}
Please go through [this document](https://ubc-cs.github.io/cpsc330-2025S1/syllabus.html#registration) carefully before contacting your instructors about these issues. Even then, we are very unlikely to be able to help with registration, waitlist or prerequisite issues.
:::

- If you are on waitlist and if you'd like to try your chances, you should be able to access [Canvas](https://canvas.ubc.ca/courses/165412) and Ed Discussion.  
- If you're unable to make it this time, there will be multiple sections of this course offered next semester and then again in the spring.

## Lecture format

- In person lectures M,W,F from 10 AM to 1 PM.
- There will be videos to watch before every lecture. You will find the list of pre-watch videos in the schedule on the course webpage.
- We will also try to work on some questions and exercises together during the class. 
- All materials will be posted in this GitHub repository. 
<!-- - Weekly tutorials will be **office hour format** run by the TAs and are **completely optional**. -->
  <!-- - You do not need to be registered in a tutorial. -->
  - You may attend any tutorials or office hours your want, regardless of in which/whether you're registered.

## Home work assignments
- First homework assignment is due **Friday May 16th**, at 6 PM. This is a relatively straightforward assignment on Python. If you struggle with this assignment then that could be a sign that you will struggle later on in the course.    
- You must do the first two homework assignments on your own.

## Exams 

- We'll have two self-scheduled midterms over a few day window and one final exam in Computer-based Testing Facility (CBTF). 

<!-- 
## Course calendar

Here is our course Calendar. Make sure you check it on a regular basis: 

[https://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2025S1/blob/main/docs/calendar.html](https://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2025S1/blob/main/docs/calendar.html)
 -->

## Course structure

- Part I: Introduction, ML fundamentals, preprocessing, midterm 1
- Part II: Unsupervised learning, transfer learning, common special cases, midterm 1
- Part III: Communication and ethics
  - ML skills are not beneficial if you can't use them responsibly and communicate your results. In this module we'll talk about these aspects. 
## Code of conduct

- Our main forum for getting help will be [Ed Discussion](https://edstem.org/us/join/rNVu2p).

::: {.callout-important}
Please read [this entire document about asking for help](https://ubc-cs.github.io/cpsc330-2025S1/docs/asking_for_help.html).
**TLDR:** Be nice.
:::

## Homework format: Jupyter lab notebooks

- Our notes are created in a [Jupyter notebook](https://jupyter.org/), with file extension `.ipynb`.
- Also, you will complete your homework assignments using Jupyter notebooks.
- Confusingly, "Jupyter notebook" is also the original application that opens `.ipynb` files - but has since been replaced by **Jupyter lab**.
  - I am using Jupyter lab, some things might not work with the Jupyter notebook application.
  - You can also open these files in Visual Studio Code.

## Jupyter lab notebooks 

- Notebooks contain a mix of code, code output, markdown-formatted text (including LaTeX equations), and more.
- When you open a Jupyter notebook in one of these apps, the document is ‚Äúlive‚Äù, meaning you can run the code.

For example:

```{python}
#| echo: true
1 + 1
```

```{python}
#| echo: true
x = [1, 2, 3]
x[0] = 9999
x
```

## More about Jupyter lab

- By default, Jupyter prints out the result of the last line of code, so you don't need as many `print` statements.
- In addition to the "live" notebooks, Jupyter notebooks can be statically rendered in the web browser, e.g. [this](https://github.com/UBC-CS/cpsc330-2025S1/blob/main/lectures/01_intro.ipynb).
  - This can be convenient for quick read-only access, without needing to launch the Jupyter notebook/lab application.
  - But you need to launch the app properly to interact with the notebooks.

## Lecture notes

- All the lectures from last year are [available here](https://ubc-cs.github.io/cpsc330-2024W2).
- We cannot promise anything will stay the same from last year to this year, so read them in advance at your own risk.
- A "finalized" version will be pushed to [GitHub](https://github.com/UBC-CS/cpsc330-2025S1) and the [Jupyter book](https://ubc-cs.github.io/cpsc330-2025S1) right before each class.
- Each instructor will have slightly adapted versions of notes to present slides during lectures.  
- You will find the link to these slides in our repository: 
https://github.com/UBC-CS/cpsc330-2025S1/tree/main/lectures/103-Firas-lectures

## Grades

- The grading breakdown is [here](https://ubc-cs.github.io/cpsc330-2025S1/syllabus.html#grading-scheme). 
- The policy on challenging grades is [here](https://ubc-cs.github.io/cpsc330-2025S1/docs/grades.html#reasonable-grading-concerns).

## Setting up your computer for the course 

## Recommended browser and tools

- You can install Chrome [here](https://www.google.com/chrome/).
- You can install Firefox [here](https://www.mozilla.org/en-US/firefox/new/). 

In this course, we will primarily be using `Python` , `git`, `GitHub`, `Canvas`, `Gradescope`, `Piazza`, and `PrairieLearn`. 

## Course `conda` environment

- Follow the setup instructions [here](https://ubc-cs.github.io/cpsc330-2025S1/docs/setup.html) to create a course `conda` environment on your computer. 
- If you do not have your computer with you, you can partner up with someone and set up your own computer later.

## Python requirements/resources

We will primarily use Python in this course.

Here is the basic Python knowledge you'll need for the course: 

- Basic Python programming
- Numpy
- Pandas
- Basic matplotlib
- Sparse matrices

Homework 1 is all about Python.

:::{.callout-note}
We do not have time to teach all the Python we need 
but you can find some useful Python resources [here](https://github.com/UBC-CS/cpsc330-2025S1/blob/main/docs/resources.md).  
:::

<br><br>

## CPSC 330 vs. 340

Read [https://ubc-cs.github.io/cpsc330-2025S1/docs/330_vs_340.html](https://ubc-cs.github.io/cpsc330-2025S1/docs 330_vs_340.html) which explains the difference between two courses.  

**TLDR:**

- 340: how do ML models work?
- 330: how do I use ML models?
- CPSC 340 has many prerequisites. 
- CPSC 340 goes deeper but has a more narrow scope.
- I think CPSC 330 will be more useful if you just plan to apply basic ML.


## What is Machine Learning (ML)?

## Spam prediction 

- Suppose you are given some data with labelled spam and non-spam messages 

::: panel-tabset
## Code

```{python}
#| echo: true
sms_df = pd.read_csv(DATA_DIR + "spam.csv", encoding="latin-1")
sms_df = sms_df.drop(columns = ["Unnamed: 2", "Unnamed: 3", "Unnamed: 4"])
sms_df = sms_df.rename(columns={"v1": "target", "v2": "sms"})
train_df, test_df = train_test_split(sms_df, test_size=0.10, random_state=42)
```

## Output

::: {.scroll-container style="overflow-y: scroll; height: 400px;"}
```{python}
HTML(train_df.head().to_html(index=False))
```
:::

:::

## Traditional programming vs. ML

- Imagine writing a Python program for spam identification, i.e., whether a text message or an email is spam or non-spam. 
- Traditional programming 
    - Come up with rules using human understanding of spam messages. 
    - Time consuming and hard to come up with robust set of rules. 
- Machine learning
    - Collect large amount of data of spam and non-spam emails and let the machine learning algorithm figure out rules. 

## Let's train a model 

- There are several packages that help us perform machine learning.

```{python}
#| echo: true
X_train, y_train = train_df["sms"], train_df["target"]
X_test, y_test = test_df["sms"], test_df["target"]
clf = make_pipeline(CountVectorizer(max_features=5000), LogisticRegression(max_iter=5000))
clf.fit(X_train, y_train); # Training the model
```

## Unseen messages

- Now use the trained model to predict targets of unseen messages:

```{python}
pd.DataFrame(X_test[0:4])
```

## Predicting on unseen data {.smaller}

**The model is accurately predicting labels for the unseen text messages above!**

```{python}
pred_dict = {
    "sms": X_test[0:4],
    "spam_predictions": clf.predict(X_test[0:4]),
}
pred_df = pd.DataFrame(pred_dict)
pred_df.style.set_properties(**{"text-align": "left"})
```

## A different way to solve problems 

Machine learning uses computer programs to model data. It can be used to extract hidden patterns, make predictions in new situation, or generate novel content.   

<blockquote>
A field of study that gives computers the ability to learn without being explicitly programmed. <br> -- Arthur Samuel (1959)
</blockquote>

## ML vs. traditional programming

- With machine learning, you're likely to 
    - Save time 
    - Customize and scale products 

![](img/traditional-programming-vs-ML.png){.nostretch fig-align="center" width="500px"}

## Prevalence of ML

Let's look at some examples. 

<!-- <img src="img/ml-examples.png" height="1000" width="1000">  -->
![](img/ml-examples.png)

## Activity: For what type of problems ML is appropriate? (~5 mins)

Discuss with your neighbour for which of the following problems you would use machine learning 

- Finding a list of prime numbers up to a limit
- Given an image, automatically identifying and labeling objects in the image
- Finding the distance between two nodes in a graph 

## Types of machine learning

Here are some typical learning problems. 

- **Supervised learning** ([Gmail spam filtering](https://support.google.com/a/answer/2368132?hl=en))
    - Training a model from input data and its corresponding targets to predict targets for new examples.     
- Unsupervised learning ([Google News](https://news.google.com/))
    - Training a model to find patterns in a dataset, typically an unlabeled dataset.
- Reinforcement learning ([AlphaGo](https://deepmind.com/research/case-studies/alphago-the-story-so-far))
    - A family of algorithms for finding suitable actions to take in a given situation in order to maximize a reward. 
- Recommendation systems ([Amazon item recommendation system](https://www.cs.umd.edu/~samir/498/Amazon-Recommendations.pdf))
    - Predict the "rating" or "preference" a user would give to an item.    

## What is supervised learning? 

- Training data comprises a set of observations ($X$) and their corresponding targets ($y$). 
- We wish to find a model function $f$ that relates $X$ to $y$.
- We use the model function to predict targets of new examples. 

![](img/sup-learning.png){.nostretch fig-align="center" width="700px"}


## ü§î Eva's questions
\

At this point, Eva is wondering about many questions. 

- How are we exactly "learning" whether a message is spam and ham? 
- Are we expected to get correct predictions for all possible messages? How does it predict the label for a message it has not seen before?  
- What if the model mis-labels an unseen example? For instance, what if the model incorrectly predicts a non-spam as a spam? What would be the consequences? 
- How do we measure the success or failure of spam identification? 
- If you want to use this model in the wild, how do you know how reliable it is?  
- Would it be useful to know how confident the model is about the predictions rather than just a yes or a no?

It's great to think about these questions right now. But Eva has to be patient. By the end of this course you'll know answers to many of these questions!

## Looking ahead to next class

It is *very* important that you watch the assigned pre-lecture videos before class!