---
title: "Lecture 6: Column transformer and text features"
author: "Firas Moosvi (Slides adapted from Varada Kolhatkar)"
description: "Column transformer and introduction to text features"
description-short: "Preprocessing and sklearn pipelines"
format:
  revealjs:
    embed-resources: true
    slide-number: true
    smaller: true
    center: true
    logo: img/UBC-CS-logo.png
    resources:
      - data/
      - img/  
---

# More preprocessing

## Remarks on preprocessing 
- There is no one-size-fits-all solution in data preprocessing, and decisions often involve a degree of subjectivity. 
  - Exploratory data analysis and domain knowledge inform these decisions
- Always consider the specific goals of your project when deciding how to encode features. 


## Alternative methods for scaling
- [StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)
  - Good choice when the column follows a normal distribution or a distribution somewhat like a normal distribution.
- [MinMaxScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html): Transform each feature to a desired range. Appropriate when 
  - Good choice for features such as human age, where there is a fixed range of values and the feature is uniformly distributed across the range
- [Normalizer](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.Normalizer.html): Works on rows rather than columns. Normalize examples individually to unit norm.
  - Good choice for frequency-type data 
- [Log scaling](https://scikit-learn.org/stable/modules/preprocessing.html#custom-transformers)
  - Good choice for features such as ratings per movies (power law distribution; a few movies have lots of ratings but most movies have very few ratings) 
- ...

## Ordinal encoding vs. One-hot encoding

- Ordinal Encoding: Encodes categorical features as an integer array.
- One-hot Encoding: Creates binary columns for each category‚Äôs presence.
- Sometimes how we encode a specific feature depends upon the context.  

## Ordinal encoding vs. One-hot encoding
- Consider **weather** feature and its four categories: Sunny (‚òÄÔ∏è), Cloudy (üå•Ô∏è), Rainy (‚õàÔ∏è), Snowy (‚ùÑÔ∏è)
- Which encoding would you use in each of the following scenarios? 
  - **Predicting traffic volume** 
  - **Predicting severity of weather-related road incidents** 

## Ordinal encoding vs. One-hot encoding
- Consider **weather** feature and its four categories: Sunny (‚òÄÔ∏è), Cloudy (üå•Ô∏è), Rainy (‚õàÔ∏è), Snowy (‚ùÑÔ∏è)
- **Predicting traffic volume:** Using one-hot encoding would make sense here because the impact of different weather conditions on traffic volume does not necessarily follow a clear order and different weather conditions could have very distinct effects.
- **Predicting severity of weather-related road incidents:** An ordinal encoding might be more appropriate if you define your weather categories from least to most severe as this could correlate directly with the likelihood or severity of incidents.

## `handle_unknown = "ignore"` of `OneHotEncoder` 
- Use `handle_unknown='ignore'` with `OneHotEncoder` to safely ignore unseen categories during transform.
- In each of the following scenarios, identify whether it's a reasonable strategy or not. 
  - Example 1: Suppose you are building a model to predict customer behavior (e.g., purchase likelihood) based on features like `location`, `device_type`, and `product_category`. During training, you have observed a set of categories for `product_category`, but in the future, new product categories might be added.
  - Example 2: You‚Äôre building a model to predict disease diagnosis based on symptoms, where each symptom is categorized (e.g., fever, headache, nausea).

## `handle_unknown = "ignore"` of `OneHotEncoder` 
- Reasonable use: When unseen categories are less likely to impact the model's prediction accuracy (e.g., product categories in e-commerce), and you prefer to avoid breaking the model.
- Not-so-reasonable use: When unseen categories could provide critical new information that could significantly alter predictions (e.g., in medical diagnostics), ignoring them could result in a poor or dangerous outcome.

## `drop="if_binary"` argument of OneHotEncoder

- drop='if_binary' argument in OneHotEncoder:
- Reduces redundancy by dropping one of the columns if the feature is binary.

## Categorical variables with too many categories
- Strategies for categorical variables with too many categories:
  - Dimensionality reduction techniques
  - Bucketing categories into ‚Äòothers‚Äô
  - Clustering or grouping categories manually 
  - Only considering top-N categories 
  - ...

## Dealing with text features 
- Preprocessing text to fit into machine learning models using text vectorization.
- Bag of words representation 
![](img/bag-of-words.png)

## `sklearn` `CountVectorizer`
- Use `scikit-learn`‚Äôs `CountVectorizer` to encode text data
- `CountVectorizer`: Transforms text into a matrix of token counts
- Important parameters:
  - `max_features`: Control the number of features used in the model 
  - `max_df`, `min_df`: Control document frequency thresholds
  - `ngram_range`: Defines the range of n-grams to be extracted
  - `stop_words`: Enables the removal of common words that are typically uninformative in most applications, such as ‚Äúand‚Äù, ‚Äúthe‚Äù, etc.

## Incorporating text features in a machine learning pipeline
```python
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC
from sklearn.pipeline import make_pipeline

text_pipeline = make_pipeline(
    CountVectorizer(),
    SVC()
)
```

<!-- 
## (iClicker) Exercise 6.2
iClicker cloud join link: **https://join.iclicker.com/VYFJ**

Select all of the following statements which are TRUE.

- (A) `handle_unknown="ignore"` would treat all unknown categories equally.
- (B) As you increase the value for `max_features` hyperparameter of `CountVectorizer` the training score is likely to go up.
- (C) Suppose you are encoding text data using `CountVectorizer`. If you encounter a word in the validation or the test split that's not available in the training data, we'll get an error.
- (D) In the code below, inside `cross_validate`, each fold might have slightly different number of features (columns) in the fold.

```python
pipe = (CountVectorizer(), SVC())
cross_validate(pipe, X_train, y_train)
``` -->

